<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="../entries2html.xsl" ?>
<entry name="buttonMarkup" type="method" return="jQuery" deprecated="1.4.0">
	<title>.buttonMarkup()</title>
	<desc>Adds button styling to an element</desc>
	<longdesc>
		<div class="warning"><strong>Note:</strong> .buttonMarkup() is deprecated as of jQuery Mobile 1.4.0 and will be removed in 1.5.0. You can now assign the full range of button style options to your <code>button</code> or <code>a</code> elements by simply adding classes.</div>
		<p></p>
		<h2 id="migration">Transition to class-based styling</h2>
		Keeping in mind the followings will make it easy for you to transition from the button styling based on data attributes to the class-based process:
		<ul>
			<li>When using icons, you must always specify an icon position class along with the icon class, because there is no longer a default icon position. In the example below the class <code>ui-btn-icon-left</code> is added to make sure the icon (<code>ui-icon-arrow-r</code>) will be displayed.
<pre><code><![CDATA[
<a href="http://example.com/" class="ui-btn ui-icon-arrow-r ui-btn-icon-left ui-corner-all ui-shadow ui-btn-inline">Example</a>
]]></code></pre>
			<iframe src="/resources/buttonMarkup/example48.html" style="width:100%;height:90px;border:0px"></iframe>
			</li>
			<li>Although the style-related data attributes are deprecated, the data attributes related to linking behavior remain unchanged. In the example below the button is styled using classes, but the data attributes related to linking are retained.
<pre><code><![CDATA[
<a href="/" data-rel="external" class="ui-btn ui-corner-all ui-shadow ui-btn-inline ui-icon-home ui-btn-icon-left">Home</a>
]]></code></pre>
			<iframe src="/resources/buttonMarkup/example49.html" style="width:100%;height:90px;border:0px"></iframe>
			</li>
			<li>We do not recommend mixing styling based on data attributes and class-based styling during the deprecation period.</li>
		</ul>
		<h2>Button markup</h2>
		<p>You can use <code>.buttonMarkup()</code> to style any element as a button that is attractive and useable on a mobile device. It is a convenience function that allows you to manipulate the classes related to button styling. For each element in the set of matched elements this function converts the <code>options</code> parameter to a list of classes to be applied to the element, while respecting the element's existing classes that are not related to button styling. You may also set the parameter <code>overwriteClasses</code> to <code>true</code> for performance reasons. When <code>overwriteClasses</code> is set to <code>true</code> the function discards existing classes and applies the classes corresponding to the options provided.</p>

	<h2>Autoinitialization</h2>
	<p>The framework will automatically apply button styling to anchors that have the attribute <code>data-role="button"</code> as well as <code>button</code> elements, anchors contained directly in bars and <a href="/controlgroup/">controlgroup</a> widgets. You can specify button styling options via data attributes that you add to the anchor or <code>button</code> element. The data attribute corresponding to each <code>.buttonMarkup()</code> option is documented in the <a href="#buttonMarkup-options-overwriteClasses">options</a> of <code>.buttonMarkup()</code>. The example below shows the markup needed for an anchor-based button.</p>

<pre><code><![CDATA[
<a href="index.html" data-role="button">Link button</a>
]]></code></pre>

		<p>Produces this <strong>anchor-based</strong> button:
		<iframe src="/resources/buttonMarkup/example1.html" style="width:100%;height:90px;border:0px"></iframe></p>

		<p><strong>Button</strong> based button:</p>

	<p><code>.buttonMarkup()</code> also automatically enhances <code>button</code> elements such as the one below:</p>

<pre><code><![CDATA[
<button>Button element</button>
]]></code></pre>

		<iframe src="/resources/buttonMarkup/example4.html" style="width:100%;height:90px;border:0px"></iframe>

	<h3>Disabled appearance</h3>
	<p>You can style an anchor as disabled by adding the class <code>ui-state-disabled</code>.</p>
	<p><strong>Note:</strong> It is not inherently possible to "disable" anchors. The class <code>ui-state-disabled</code> merely adds styling to make the anchor look disabled. It does not provide the same level of functionality as the <code>disabled</code> attribute of a form button. It may still be possible to follow the anchor using navigation methods that do not involve the pointing device.</p>
<pre><code><![CDATA[
<a href="index.html" data-role="button" class="ui-state-disabled">Link button</a>
]]></code></pre>

		<p>Produces an <strong>anchor-based</strong> button styled as disabled:
		<iframe src="/resources/buttonMarkup/example2.html" style="width:100%;height:90px;border:0px"></iframe>
		</p>

	<p>In the case of <code>button</code> elements, you should apply the <code>ui-state-disabled</code> class when you set the <code>button</code> element's <code>disabled</code> attribute:</p>
<pre><code><![CDATA[
// Toggle the class ui-state-disabled in conjunction with modifying the value
// of the button element's "disabled" property
$( "button#myButton" )
	.prop( "disabled", isDisabled )
	.toggleClass( "ui-state-disabled", isDisabled );
]]></code></pre>
		<h3>Inline buttons</h3>

		<p>By default, all buttons in the body content are styled as block-level elements so they fill the width of the screen:
		<iframe src="/resources/buttonMarkup/example20.html" style="width:100%;height:250px;border:0px"></iframe></p>

		<p>If you have multiple buttons that should sit side-by-side on the same line, add the <code>data-inline="true"</code> attribute to each button. This will style the buttons to be the width of their content and float the buttons so they sit on the same line.</p>

<pre><code><![CDATA[
<a href="index.html" data-role="button" data-inline="true">Cancel</a>
<a href="index.html" data-role="button" data-inline="true" data-theme="b">Save</a>
]]></code></pre>

		<iframe src="/resources/buttonMarkup/example22.html" style="width:100%;height:220px;border:0px"></iframe>

		<p>If you want buttons to sit side-by-side but stretch to fill the width of the screen, you can use the content column grids to put normal full-width buttons into 2- or 3-columns.</p>

		<h3>Mini version</h3>

		<p>For a more compact version that is useful in toolbars and tight spaces, add the <code>data-mini="true"</code> attribute to the button to create a mini version. </p>

<pre><code><![CDATA[
<a href="index.html" data-role="button" data-mini="true">Link button</a>
]]></code></pre>

		<p>This will produce a button that is not as tall as the standard version and has a smaller text size.
		<iframe src="/resources/buttonMarkup/example3.html" style="width:100%;height:90px;border:0px"></iframe>
		</p>

    <h2>Adding Icons to Buttons</h2>
		<p>The jQuery Mobile framework includes a selected set of icons most often needed for mobile apps. To minimize download size, jQuery Mobile includes a single white icon sprite, and automatically adds a semi-transparent black circle behind the icon to ensure that it has good contrast on any background color.</p>

			<p>An icon can be added to a button by adding a <code>data-icon</code> attribute on the anchor specifying the icon to display. For example:</p>

<pre><code><![CDATA[
<a href="index.html" data-role="button" data-icon="delete">Delete</a>
]]></code></pre>

			<iframe src="/resources/buttonMarkup/example8.html" style="width:100%;height:220px;border:0px"></iframe>

			<h3>Icon set</h3>

			<p>The following <code>data-icon</code> attributes can be referenced to create the icons shown below:
			<iframe src="/resources/buttonMarkup/example10.html" style="width:100%;height:1970px;border:0px"></iframe></p>

			<h3>Icon positioning</h3>
			<p>By default, all icons in buttons are placed to the left of the button text.
			<iframe src="/resources/buttonMarkup/example11.html" style="width:100%;height:90px;border:0px"></iframe></p>

			<p>This default may be overridden using the <code>data-iconpos</code> attribute to set the icon to the right, above (top) or below (bottom) the text. For example:</p>
<pre><code><![CDATA[
<a href="index.html" data-role="button" data-icon="delete" data-iconpos="right">Delete</a>
]]></code></pre>

			<iframe src="/resources/buttonMarkup/example12.html" style="width:100%;height:380px;border:0px"></iframe>

			<p>You can also create an icon-only button, by setting the <code>data-iconpos</code> attribute to <code>notext</code>. The button plugin will hide the text on-screen, but add it as a <code>title</code> attribute on the link to provide context for screen readers and devices that support tooltips. For example, replacing <code>data-iconpos="right"</code> on the previous example with <code>data-iconpos="notext"</code>:</p>

<pre><code><![CDATA[
<a href="index.html" data-role="button" data-icon="delete" data-iconpos="notext">Delete</a>
]]></code></pre>

			<p>Creates this icon-only button:
			<iframe src="/resources/buttonMarkup/example15.html" style="width:100%;height:60px;border:0px"></iframe></p>

			<h3>Mini &amp; Inline</h3>
			<p>The mini and inline attributes can be added to produce more compact buttons:
			<iframe src="/resources/buttonMarkup/example16.html" style="width:100%;height:90px;border:0px"></iframe></p>

			<h3>Custom Icons</h3>
			<p>To use custom icons, specify a <code>data-icon</code> value that has a unique name like <code>myapp-email</code> and the button plugin will generate a class by prefixing <code>ui-icon-</code> to the <code>data-icon</code> value and apply it to the button: <code>ui-icon-myapp-email</code>.</p>
			<p>You can then write a CSS rule in your stylesheet that targets the <code>ui-icon-myapp-email:after</code> class to specify the icon background source. The framework contains an inline (data URI) SVG test and adds class <code>ui-nosvg</code> to the <code>html</code> element if this is not supported. If you are using SVG icons you can use this class to provide a fallback to external PNG icons.</p>

<pre><code><![CDATA[
.ui-icon-myapp-email:after {
	background-image: url('data:image/svg+xml;...');
}
.ui-nosvg .ui-icon-myapp-email:after {
	background-image: url( "app-icon-email.png" );
}
]]></code></pre>

		<h3>Icons and themes</h3>
		<p>The semi-transparent black circle behind the white icon ensures good contrast on any background color so it works well with the jQuery Mobile theming system. Here are examples of the same icons sitting on top of a range of different color swatches with themed buttons.</p>

		<p>
		<iframe src="/resources/buttonMarkup/example17.html" style="width:100%;height:450px;border:0px"></iframe></p>

		<h3>Icon example</h3>

		<iframe src="/resources/buttonMarkup/example24.html" style="width:100%;height:220px;border:0px"></iframe>

		<h2>Grouped buttons</h2>

		<p>Occasionally, you may want to visually group a set of buttons to form a single block that looks contained like a navigation component. To get this effect, wrap a set of buttons in a container with the <code>data-role="controlgroup"</code> attribute - the framework will create a vertical button group, remove all margins and drop shadows between the buttons, and only round the first and last buttons of the set to create the effect that they are grouped together.</p>

<pre><code><![CDATA[
<div data-role="controlgroup">
	<a href="index.html" data-role="button">Yes</a>
	<a href="index.html" data-role="button">No</a>
	<a href="index.html" data-role="button">Maybe</a>
</div>
]]></code></pre>

		<p>By default, grouped buttons are presented as a vertical list:
		<iframe src="/resources/buttonMarkup/example26.html" style="width:100%;height:150px;border:0px"></iframe></p>

		<p>By adding the <code>data-type="horizontal"</code> attribute to the <code>controlgroup</code> container, you can swap to a horizontal-style group that floats the buttons side-by-side and sets the width to only be large enough to fit the content. (Be aware that these will wrap to multiple lines if the number of buttons or the overall text length is too wide for the screen.)</p>

		<p>
		<iframe src="/resources/buttonMarkup/example27.html" style="width:100%;height:550px;border:0px"></iframe></p>

        <h3>Labels</h3>
		<p>Because the <code>label</code> element will be associated with each individual <code>input</code> or <code>button</code> and will be hidden for styling purposes, we recommend wrapping the buttons in a <code>fieldset</code> element that has a <code>legend</code> which acts as the combined label for the group. Using the <code>label</code> as a wrapper around an input prevents the framework from hiding it, so you have to use the <code>for</code> attribute to associate the <code>label</code> with the input.</p>

		<h2>Theming button-styled elements</h2>

		<p>jQuery Mobile has a rich theming system that gives you full control of how buttons are styled. When a link is added to a container, it is automatically assigned a theme swatch letter that matches its parent bar or content box to visually integrate the button into the parent container, like a chameleon. So a button placed inside a content container with a theme of "a" will be automatically assigned the button theme of "a". Here are examples of the button theme pairings in the default theme. All buttons have the same HTML markup:
		<iframe src="/resources/buttonMarkup/example33.html" style="width:100%;height:240px;border:0px"></iframe></p>

		<h3>Assigning theme swatches</h3>
		<p>Buttons can be manually assigned any of the button color swatches from the theme to add visual contrast with the container they sit inside by adding the <code>data-theme</code> attribute on the button markup and specifying a swatch letter.</p>

<pre><code><![CDATA[
<a href="index.html" data-role="button" data-theme="b">Swatch b</a>
]]></code></pre>

		<p>Here are 2 buttons with icons that have a different swatch letter assigned via the <code>data-theme</code> attribute.
		<iframe src="/resources/buttonMarkup/example34.html" style="width:100%;height:90px;border:0px"></iframe></p>

		<h3>Theme variations</h3>

		<p><iframe src="/resources/buttonMarkup/example35.html" style="width:100%;height:330px;border:0px"></iframe></p>

	</longdesc>
	<signature>
		<argument name="options" type="Object">
			<property name="corners" default="true">
				<desc>Adds the class <code>ui-corner-all</code> when <code>true</code> and removes it when <code>false</code>. This gives the button-styled element rounded corners.
				<p>This option is also exposed as a data-attribute: <code>data-corners="false"</code></p>
				<iframe src="/resources/buttonMarkup/example40.html" style="width:100%;height:90px;border:0px"></iframe>
				</desc>
				<type name="Boolean" />
			</property>
			<property name="icon" default='""'>
				<desc>Adds an icon class by prefixing the value with the string "ui-icon-" and an icon position class based on the value of the <code>iconpos</code> option.
				<p>For example, if the value is "arrow-r" and the value of the <code>iconpos</code> option is "left", then <code>.buttonMarkup()</code> will add the classes <code>ui-icon-arrow-r</code> and <code>ui-btn-icon-left</code> to each of the set of matched elements.</p>
				<p>This option is also exposed as a data-attribute: <code>data-icon="arrow-r"</code></p>
				<iframe src="/resources/buttonMarkup/example41.html" style="width:100%;height:90px;border:0px"></iframe>
				</desc>
				<type name="String" />
			</property>
			<property name="iconpos" default='"left"'>
				<desc>Adds an icon position class by prefixing the value with the string "ui-btn-icon-" when the button-styled element has an icon.
				<p>For example, if the value is "right" and the button-styled element has an icon, then the class <code>ui-btn-icon-right</code> will be added to each of the set of matched elements.</p>
				<p>This option is also exposed as a data-attribute: <code>data-iconpos="right"</code></p>
				<iframe src="/resources/buttonMarkup/example42.html" style="width:100%;height:90px;border:0px"></iframe>
				</desc>
				<type name="String" />
			</property>
			<property name="iconshadow" default="false" deprecated="1.4.0">
				<desc>
					<strong>This option is deprecated in 1.4.0 and will be removed in 1.5.0.</strong>
					<p>Adds the class <code>ui-shadow-icon</code> to each of the set of matched elements when set to <code>true</code> and the button-styled element has an icon.</p>
				<p>This option is also exposed as a data-attribute: <code>data-iconshadow="true"</code></p>
				<iframe src="/resources/buttonMarkup/example43.html" style="width:100%;height:90px;border:0px"></iframe>
				</desc>
				<type name="Boolean" />
			</property>
			<property name="inline" default="false">
				<desc>
					Adds the class <code>ui-btn-inline</code> to each of the set of matched elements when set to true.
				<p>This option is also exposed as a data-attribute: <code>data-inline="true"</code></p>
				<iframe src="/resources/buttonMarkup/example44.html" style="width:100%;height:90px;border:0px"></iframe>
				</desc>
				<type name="Boolean" />
			</property>
			<property name="mini" default="false">
				<desc>
					Adds the class <code>ui-mini</code> to each of the set of matched elements when set to true.
				<p>This option is also exposed as a data-attribute: <code>data-mini="true"</code></p>
				<iframe src="/resources/buttonMarkup/example45.html" style="width:100%;height:90px;border:0px"></iframe>
				</desc>
				<tyle name="Boolean" />
			</property>
			<property name="shadow" default="true">
				<desc>
					Adds the class <code>ui-shadow</code> to each of the set of matched elements when set to true.
				<p>This option is also exposed as a data-attribute: <code>data-shadow="false"</code></p>
				<iframe src="/resources/buttonMarkup/example46.html" style="width:100%;height:90px;border:0px"></iframe>
				</desc>
				<type name="Boolean" />
			</property>
			<property name="theme" default="null, inherited from parent">
				<desc>
					The value is a letter a-z identifying one of the color swatches in the current theme, or <code>null</code>.
					<p>This option adds a class constructed by appending the string "ui-btn-" to the value to each of the set of matched elements. If set to <code>null</code>, no class is added, and the swatch is inherited from the element's parent.</p>
					<p>For example, a value of "b" will cause the class <code>ui-btn-b</code> to be added to each of the set of matched elements.</p>
				<p>This option is also exposed as a data-attribute: <code>data-theme="b"</code></p>
				<iframe src="/resources/buttonMarkup/example47.html" style="width:100%;height:90px;border:0px"></iframe>
				</desc>
				<type name="String" />
			</property>
		</argument>
		<argument name="overwriteClasses" default="false">
			<desc>
				When set to <code>true</code>, <code>.buttonMarkup()</code> discards all classes on each of the set of matched elements and adds classes based on the values passed into the <code>options</code> argument. You can use this feature to increase performance in situations where the element you wish to enhance does not have any classes other than the button styling classes added by <code>.buttonMarkup()</code>.
				<p>Conversely, when set to <code>false</code>, <code>.buttonMarkup()</code> first parses the existing classes found on each of the set of matched elements and computes a set of existing options based on the presence or absence of classes related to button styling already present. It separately records any classes unrelated to button styling. It then merges the options specified in the <code>options</code> parameter with the computed options such that the <code>options</code> passed in take precedence, and calculates a list of classes that must be present for those options to be expressed in the element's styling. It then re-applies the classes unrelated to button styling as well as the classes that reflect the new set of options. This means that calling <code>.buttonMarkup()</code> on the same element multiple times will have the expected effect:</p>
<pre><code><![CDATA[
// Initially corners are turned off
$( "#myAnchor" ).buttonMarkup({ corners: false });

// Later on we turn off shadow - the lack of corners is retained
$( "#myAnchor" ).buttonMarkup({ shadow: false });

// Later still we turn corners back on - the lack of shadow is retained
$( "#myAnchor" ).buttonMarkup({ corners: true });
]]></code></pre>
			</desc>
			<type name="Boolean" />
		</argument>
	</signature>
	<category slug="methods"/>
</entry>
