<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="../entries2html.xsl" ?>
<entry name="selectmenu" namespace="fn" type="widget" widgetnamespace="mobile" event-prefix="select">
	<title>Selectmenu Widget</title>
	<desc>Creates a select menu widget</desc>
	<longdesc>
		<p>The select menu is based on a native select element, which is hidden from view and replaced with a custom-styled select button that matches the look and feel of the jQuery Mobile framework. The select menu is ARIA-enabled and keyboard accessible on the desktop as well.</p>
		<p>By default, the framework leverages the native OS options menu to use with the custom button. When the button is clicked, the native OS menu will open. When a value is selected and the menu closes, the custom button's text is updated to match the selected value. Please note that the framework also offers the possibility of having custom (non-native) select menus.</p>
		<p>To add a select menu to your page, start with a standard <code>select</code> element populated with a set of <code>option</code> elements. Set the <code>for</code> attribute of the <code>label</code> to match the <code>id</code> of the <code>select</code> so they are semantically associated. It's possible to <a href="../docs-forms.html">accessibly hide the label</a> if it's not desired in the page layout, but we require that it is present in the markup for semantic and accessibility reasons.</p>
			
		<p>The framework will find all <code>select</code> elements and automatically enhance them into select menus, no need to apply a <code>data-role</code> attribute. To prevent the automatic enhancement of a select, add  <code>data-role="none"</code> attribute to the <code>select</code>.</p>
			
<pre><code>
&lt;label for=&quot;select-choice-0&quot; class=&quot;select&quot;&gt;Shipping method:&lt;/label&gt;
&lt;select name=&quot;select-choice-0&quot; id=&quot;select-choice-0&quot;&gt;
	&lt;option value=&quot;standard&quot;&gt;Standard: 7 day&lt;/option&gt;
	&lt;option value=&quot;rush&quot;&gt;Rush: 3 days&lt;/option&gt;
	&lt;option value=&quot;express&quot;&gt;Express: next day&lt;/option&gt;
	&lt;option value=&quot;overnight&quot;&gt;Overnight&lt;/option&gt;
&lt;/select&gt;
</code></pre>

		<p>This will produce a basic select menu. The default styles set the width of the input to 100% of the parent container and stacks the label on a separate line.
		<iframe src="/resources/select/example1.html" style="width:100%;height:190px;border:0px"></iframe></p>
        
		<h3>Mini version</h3>
        
		<p>For a more compact version that is useful in toolbars and tight spaces, add the <code>data-mini="true"</code> attribute to the element to create a <a href="../forms-all-mini.html">mini version</a>. </p>

<pre><code>	
&lt;label for=&quot;select-choice-min&quot; class=&quot;select&quot;&gt;Shipping method:&lt;/label&gt;
&lt;select name=&quot;select-choice-min&quot; id=&quot;select-choice-min&quot; data-mini=&quot;true&quot;&gt;
	&lt;option value=&quot;standard&quot;&gt;Standard: 7 day&lt;/option&gt;
	&lt;option value=&quot;rush&quot;&gt;Rush: 3 days&lt;/option&gt;
	&lt;option value=&quot;express&quot;&gt;Express: next day&lt;/option&gt;
	&lt;option value=&quot;overnight&quot;&gt;Overnight&lt;/option&gt;
&lt;/select&gt; 
</code></pre>
			
		<p>This will produce a select that a not as tall as the standard version and has a smaller text size.
		<iframe src="/resources/select/example2.html" style="width:100%;height:190px;border:0px"></iframe></p>
        
		<h3>Field containers</h3>
        
		<p>Optionally wrap the selects in a container with the <code>data-role="fieldcontain"</code> attribute to help visually group it in a longer form.</p>
		
<pre><code>
&lt;div data-role=&quot;fieldcontain&quot;&gt;
	&lt;label for=&quot;select-choice-1&quot; class=&quot;select&quot;&gt;Shipping method:&lt;/label&gt;
	&lt;select name=&quot;select-choice-1&quot; id=&quot;select-choice-1&quot;&gt;
		&lt;option value=&quot;standard&quot;&gt;Standard: 7 day&lt;/option&gt;
		&lt;option value=&quot;rush&quot;&gt;Rush: 3 days&lt;/option&gt;
		&lt;option value=&quot;express&quot;&gt;Express: next day&lt;/option&gt;
		&lt;option value=&quot;overnight&quot;&gt;Overnight&lt;/option&gt;
	&lt;/select&gt;
&lt;/div&gt;
</code></pre>
		
		<p>The select input is now displayed like this:
		<iframe src="/resources/select/example3.html" style="width:100%;height:190px;border:0px"></iframe></p>
		
		<p>An example of a select with a long list of options:
		<iframe src="/resources/select/example4.html" style="width:100%;height:590px;border:0px"></iframe></p>

		<h3>Optgroups</h3>
		<p>The following example organizes the options into <code>optgroup</code> elements. Support for this feature in mobile selects is a bit spotty, but is improving.</p>

<pre><code>
&lt;div data-role="fieldcontain"&gt;
	&lt;label for="select-choice-nc" class="select"&gt;Preferred delivery:&lt;/label&gt;
	&lt;select name="select-choice-8" id="select-choice-nc"&gt;
    	&lt;optgroup label="FedEx"&gt;
			&lt;option value="firstOvernight"&gt;First Overnight&lt;/option&gt;
			&lt;option value="expressSaver"&gt;Express Saver&lt;/option&gt;
			&lt;option value="ground"&gt;Ground&lt;/option&gt;
		&lt;/optgroup&gt;
		&lt;optgroup label="UPS"&gt;
			&lt;option value="firstOvernight"&gt;First Overnight&lt;/option&gt;
			&lt;option value="expressSaver"&gt;Express Saver&lt;/option&gt;
			&lt;option value="ground"&gt;Ground&lt;/option&gt;
		&lt;/optgroup&gt;
		&lt;optgroup label="US Mail"&gt;
			&lt;option value="standard"&gt;Standard: 7 day&lt;/option&gt;
			&lt;option value="rush"&gt;Rush: 3 days&lt;/option&gt;
			&lt;option value="express"&gt;Express: next day (disabled)&lt;/option&gt;
			&lt;option value="overnight"&gt;Overnight&lt;/option&gt;
		&lt;/optgroup&gt;
	&lt;/select&gt;
&lt;/div&gt;
</code></pre>

		<iframe src="/resources/select/example5.html" style="width:100%;height:390px;border:0px"></iframe>

		<h3>Vertically grouped select inputs</h3>

		<p>To create a grouped set of select inputs, first add <code>select</code> and a corresponding <code>label</code>. Set the <code>for</code> attribute of the <code>label</code> to match the <code>id</code> of the <code>select</code> so they are semantically associated.</p>

		<p>Because the <code>label</code> element will be associated with each individual select input, we recommend wrapping the selects in a <code>fieldset</code> element that has a <code>legend</code> which acts as the combined label for the grouped inputs.</p>

		<p>Lastly, one needs to wrap the <code>fieldset</code> in a <code>div</code> with <code> data-role="controlgroup"</code> attribute, so it can be styled as a group.</p>
			
<pre><code>	
&lt;div data-role=&quot;fieldcontain&quot;&gt;
	&lt;fieldset data-role=&quot;controlgroup&quot;&gt;
		&lt;legend&gt;Date of Birth:&lt;/legend&gt;

		&lt;label for="select-choice-month">Month&lt;/label&gt;
		&lt;select name="select-choice-month" id="select-choice-month"&gt;
			&lt;option&gt;Month&lt;/option&gt;
			&lt;option value="jan"&gt;January&lt;/option&gt;
			&lt;!-- etc. --&gt;
		&lt;/select&gt;

		&lt;label for="select-choice-day">Day&lt;/label&gt;
		&lt;select name="select-choice-day" id="select-choice-day"&gt;
			&lt;option&gt;Day&lt;/option&gt;
			&lt;option value="1"&gt;1&lt;/option&gt;
			&lt;!-- etc. --&gt;
		&lt;/select&gt;

		&lt;label for="select-choice-year">Year&lt;/label&gt;
		&lt;select name="select-choice-year" id="select-choice-year"&gt;
			&lt;option&gt;Year&lt;/option&gt;
			&lt;option value="2011"&gt;2011&lt;/option&gt;
			&lt;!-- etc. --&gt;	
		&lt;/select&gt;
	&lt;/fieldset&gt;
&lt;/div&gt;
</code></pre>
		
		<iframe src="/resources/select/example6.html" style="width:100%;height:390px;border:0px"></iframe>

		<h3>Horizontally grouped select inputs</h3>
		<p>Select inputs can also be used for grouped sets with more than one related selections. To make a horizontal button set, add the <code>data-type="horizontal"</code> to the fieldset. Note that the buttons which trigger the select will resize depending on the currently selected optionâ€™s value. Note that browsers without support for <code>display: inline-block;</code> will group the selects vertically, as above.</p>

<code>
&lt;fieldset data-role="controlgroup" data-type="horizontal"&gt;
</code>
		<iframe src="/resources/select/example7.html" style="width:100%;height:190px;border:0px"></iframe>
		
		<h3>Theming selects</h3>
		
		<p>You can specify any jQuery Mobile button <code>data-</code> attribute on a select element, too. In this example, we're setting the theme, icon and inline properties:
		<iframe src="/resources/select/example8.html" style="width:100%;height:190px;border:0px"></iframe>
		</p>

		<h2>Custom select menus</h2>
		<p>The framework is capable of building a custom menu based on the <code>select</code> element's list of options.  We recommend using a custom menu when multiple selections are required, or when the menu itself must be styled with CSS.</p>

		<p>You can optionally use custom-styled select menus instead of the native OS menu. The custom menu supports disabled options and multiple selection (whereas native mobile OS support for both is inconsistent), adds an elegant way to handle placeholder values, and restores missing functionality on certain platforms such as <code>optgroup</code> support on Android (all explained below).  In addition, the framework applies the custom button's theme to the menu to better match the look and feel and provide visual consistency across platforms. Lastly, custom menus often look better on desktop browsers because native desktop menus are smaller than their mobile counterparts and tend to look disproportionate.</p>

		<p>Keep in mind that there is overhead involved in parsing the native select to build a custom menu. If there are a lot of selects on a page, or a select has a long list of options, this can impact the performance of the page, so we recommend using custom menus sparingly. </p>
	
		<p>To use custom menus on a specific <code>select</code>, just add the <code>data-native-menu="false"</code> attribute. Alternately, this can also programmatically set the select menu's <code>nativeMenu</code> configuration option to <code>false</code> in a callback bound to the <code>mobileinit</code> event to achieve the same effect. This will globally make all selects use the custom menu by default. The following must be included in the page after jQuery is loaded but before jQuery Mobile is loaded.</p>
	

<pre><code>
$(document).on('mobileinit',function(){
	$.mobile.selectmenu.prototype.options.nativeMenu = false;
});
</code></pre>


		<p>When the <code>select</code> has a small number of options that will fit on the device's screen, the menu will appear as a small overlay with a pop transition:
		<iframe src="/resources/select/example9.html" style="width:100%;height:270px;border:0px"></iframe></p>
			
		<p>When it has too many options to show on the device's screen, the framework will automatically create a new &quot;page&quot; populated with a standard <a href="listview">listview</a> for the options. This allows us to use the native scrolling included on the device for moving through a long list. The text inside the <code>label</code> is used as the title for this page.
		<iframe src="/resources/select/example10.html" style="width:100%;height:590px;border:0px"></iframe></p>
			
		<h3>Disabled options</h3>
		
		<p>jQuery Mobile will automatically disable and style option tags with the <code>disabled</code> attribute.  In the demo below, the second option &quot;Rush: 3 days&quot; has been set to disabled.
		
		<iframe src="/resources/select/example11.html" style="width:100%;height:270px;border:0px"></iframe></p>
		
		<h3>Placeholder options</h3>
		<p>It's common for developers to include a &quot;null&quot; option in their select element to force a user to choose an option. If a placeholder option is present in your markup, jQuery Mobile will hide them in the overlay menu, showing only valid choices to the user, and display the placeholder text inside the menu as a header.  A placeholder option is added when the framework finds:</p>
		<ul>
			<li>An option with no value attribute (or an empty value attribute)</li>
			<li>An option with no text node</li>
			<li>An option with a <code>data-placeholder="true"</code> attribute. (This allows you to use an option that has a value and a textnode as a placeholder option).</li>
		</ul>

		<p>You can disable this feature through the selectmenu plugin's <code>hidePlaceholderMenuItems</code> option, like this:</p>

<pre><code>
$.mobile.selectmenu.prototype.options.hidePlaceholderMenuItems = false;
</code></pre>

		<p>Examples of various placeholder options:
		<iframe src="/resources/select/example12.html" style="width:100%;height:390px;border:0px"></iframe></p>

		<h3>Multiple selects</h3>	
		
		<p>If the <code>multiple</code> attribute is present in your markup, jQuery Mobile will enhance the element with a few extra considerations:</p>

		<ul>
			<li>A header element will be created inside the menu and display the placeholder text and a close button.</li>
			<li>Clicking on an item inside the overlay menu will not close the widget.</li>
			<li>A ghosted, unchecked icon will appear adjacent to each unselected item.  When the item is selected the icon will change to a checkbox.  Neither icon will appear inside a single select box.</li>
			<li>Once 2+ items are selected, a counter element with the total number of selected items will appear inside the button.</li>
			<li>The text of each selected item will appear inside the button as a list.  If the button is not wide enough to display the entire list, it is truncated with an ellipses.</li>
			<li>If no items are selected, the button's text will default to the placeholder text.</li>
			<li>If no placeholder element exists, the default button text will be blank and the header will appear with just a close button. Because this isn't a friendly user experience, we recommended that you always specify a placeholder element when using multiple select boxes.</li>
		</ul>

		<iframe src="/resources/select/example13.html" style="width:100%;height:310px;border:0px"></iframe>
			
		<p>When a select is large enough to where the menu will open in a new page, the placeholder text is displayed in the button when no items are selected, and the <code>label</code> text is displayed in the menu's header.  This differs from smaller overlay menus where the placeholder text is displayed in both the button and the header, and from full-page single selects where the placeholder text is not used at all.
		
		<iframe src="/resources/select/example14.html" style="width:100%;height:590px;border:0px"></iframe></p>

		<h3>Optgroup support</h3>
		
		<p>If a select menu contains <code>optgroup</code> elements, jQuery Mobile will create a divider &amp; group items based on the <code>label</code> attribute's text:
		<iframe src="/resources/select/example15.html" style="width:100%;height:500px;border:0px"></iframe></p>

		<h3>Theming selects</h3>
		
		<p>You can specify any jQuery Mobile button <code>data-</code> attribute on a select element, too. In this example, we're setting the theme, icon and inline properties:
		<iframe src="/resources/select/example16.html" style="width:100%;height:310px;border:0px"></iframe></p>

		<p>The <code>data-overlay-theme</code> attribute can be added to a select element to set the color of the overlay layer for the dialog-based custom select menus and the outer border of the smaller custom menus. By default, the content block colors for swatch "a"" will be used for the overlays.
		<iframe src="/resources/select/example17.html" style="width:100%;height:290px;border:0px"></iframe></p>
 		<p><iframe src="/resources/select/example18.html" style="width:100%;height:590px;border:0px"></iframe></p>

		<h3>Calling the select menu plugin</h3>
		
		<p>The select menu plugin will auto initialize on any page that contains a select menu, without any need for a <code>data-role</code> attribute in the markup. However, you can directly call the select menu plugin on any selector, just like any normal jQuery plugin:</p>

<pre><code>
$('select').selectmenu();			
</code></pre>
	
	</longdesc>
	<added>1.0</added>
	<options>
		<option name="corners" default="true" example-value="false">
			<desc>Applies the theme button border-radius to the select button if set to true. 

			<p>This option is also exposed as a data attribute: <code>data-corners="false"</code>.</p>
			</desc>
			<type name="Boolean" />
		</option>
		<option name="icon" default='"arrow-down"' example-value='"star"'>
			<desc>Replaces the default icon "arrow-down" with an icon from the icon set. Setting this attribute to "false" suppresses the icon.

				<p>To suppress the icon, a boolean expression must be used:</p>

				<p>This option is also exposed as a data attribute: <code>data-icon="star"</code>.</p>
			</desc>
			<type name="String" />
		</option>
		<option name="iconpos" default='"right"' example-value='"left"'>
			<desc>Position of the icon in the select button. Possible values: left, right, top, bottom, notext. The notext value will display the select as an icon-only button with no text feedback.

				<p>This option is also exposed as a data attribute: <code>data-iconpos="left"</code>.</p>
			</desc>
			<type name="String" />
		</option>
		<option name="iconshadow" default="true" example-value="false">
			<desc>Applies the theme shadow to the select button if set to true.

				<p>This option is also exposed as a data attribute: <code>data-iconshadow="false"</code>.</p>
			</desc>
			<type name="Boolean" />
		</option>
		<option name="initSelector" default="select:not(:jqmData(role='slider'))">
			<desc>This is used to define the selectors (element types, data roles, etc.) that will automatically be initialized as select menus. To change which elements are initialized, bind this option to the mobileinit event:
<pre><code>
$( document ).on( "mobileinit", function(){
	$.mobile.selectmenu.prototype.options.initSelector = ".myselect";
});
</code></pre>
                
				<p>This option is also exposed as a data attribute: <code>data-mini="true"</code>.</p>
			</desc>
			<type name="CSS selector string" />
		</option>
		<option name="inline" default="null (false)" example-value="true">
			<desc>If set to true, this will make the select button act like an inline button so the width is determined by the button's text. By default, this is null (false) so the select button is full width, regardless of the feedback content. Possible values: true, false. 

				<p>This option is also exposed as a data attribute: <code>data-inline="true"</code>.</p>
			</desc>
			<type name="Boolean" />
		</option>
		<option name="mini" default="false" example-value="true">
			<desc>Sets the size of the element to a more compact, mini version. 
               
				<p>This option is also exposed as a data attribute: <code>data-mini="true"</code>.</p>
			</desc>
			<type name="Boolean" />
		</option>
		<option name="nativeMenu" default="true" example-value="false">
			<desc>When set to true, clicking the custom-styled select menu will open the native select menu which is best for performance. If set to false, the custom select menu style will be used instead of the native menu. 

				<p>This option is also exposed as a data attribute: <code>data-native-menu="false"</code>.</p>
			</desc>
			<type name="Boolean" />
		</option>
		<option name="preventFocusZoom" default="true on iOS platforms" example-value="false">
			<desc>This option disables page zoom temporarily when a custom select is focused, which prevents iOS devices from zooming the page into the select. By default, iOS often zooms into form controls, and the behavior is often unnecessary and intrusive in mobile-optimized layouts.

				<p>This option is also exposed as a data attribute: <code>data-prevent-focus-zoom="true"</code>.</p>
			</desc>
			<type name="Boolean" />
		</option>
		<option name="shadow" default="true" example-value="false">
			<desc>Applies the drop shadow style to the select button if set to true. 

				<p>This option is also exposed as a data attribute: <code>data-shadow="false"</code>.</p>
			</desc>
			<type name="Boolean" />
		</option>
		<option name="overlayTheme" default='"a"' example-value='"d"'>
			<desc>Sets the color of the overlay layer for the dialog-based custom select menus and the outer border of the smaller custom menus. It accepts a single letter from a-z that maps to the swatches included in your theme. By default, the content block colors for swatch "a" will be used for the overlays.

				<p>This option is also exposed as a data attribute: <code>ui-body-d</code>.</p>
			</desc>
			<type name="String" />
		</option>
		<option name="theme" default="null, inherited from parent" example-value='"a"'>
			<desc>Sets the color scheme (swatch) for all instances of this widget. It accepts a single letter from a-z that maps to the swatches included in your theme. By default, it will inherit the same swatch color as its parent container if not explicitly set.

				<p>Possible values: swatch letter (a-z).</p>
				<p>This option is also exposed as a data attribute: <code>data-theme="a"</code>.</p>
			</desc>
			<type name="String" />
		</option>
	</options>
    <events>
 		<event name="create">
			<desc>triggered when a text input is created</desc>
			<argument name="event" type="Event">
				<desc></desc>
			</argument>
			<argument name="ui" type="Object">
				<desc></desc>
			</argument>
		</event>
	</events>
	<methods>
		<method name="close">
			<desc>close an open select menu.
			</desc>
		</method>
		<method name="enable">
			<desc>enable a disabled text input.
			</desc>
		</method>
		<method name="disable">
			<desc>disable a text input.
			</desc>
		</method>
		<method name="open">
			<desc>open a closed select menu (custom menus only).
			</desc>
		</method>
		<method name="refresh">
			<desc> 
			</desc>
			<signature>
				<desc>update the custom select.<p>This is used to update the custom select to reflect the native select element's value. If the number of options in the select are different than the number of items in the custom menu, it'll rebuild the custom menu.</p></desc>
			</signature>
			<signature example-params="true">
					<desc>update the custom select.<p>This is used to update the custom select to reflect the native select element's value. If the number of options in the select are different than the number of items in the custom menu, it'll rebuild the custom menu. If you pass a true argument you can force the rebuild to happen.</p></desc>
				<argument name="option" type="Boolean">
					<desc>to force a rebuild</desc>
				</argument>
			</signature>
		</method>
	</methods>
	<example>
        <desc>A basic example of a simple native select</desc>
        <html><![CDATA[<div data-role="header">
		<h1>jQuery Mobile Example</h1>
	</div>
	<div data-role="content">
		<label for="select-choice-0" class="select">Shipping method:</label>
		<select name="select-choice-0" id="select-choice-0">
			<option value="standard">Standard: 7 day</option>
			<option value="rush">Rush: 3 days</option>
			<option value="express">Express: next day</option>
			<option value="overnight">Overnight</option>
		</select>
	</div>]]></html>
	</example>
	<category slug="widgets"/>
</entry>
