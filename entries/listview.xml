<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="../entries2html.xsl" ?>
<entry name="listview" namespace="fn" type="widget" widgetnamespace="mobile">
	<title>Listview Widget</title>
	<desc>Creates a listview widget</desc>
	<longdesc>
		<h3>Basic linked lists</h3>
			<p>A listview is coded as a simple unordered list containing linked list items with a <code> data-role="listview"</code> attribute. jQuery Mobile will apply all the necessary styles to transform the list into a mobile-friendly listview with right arrow indicator that fills the full width of the browser window. When you tap on the list item, the framework will trigger a click on the first link inside the list item, issue an Ajax request for the URL in the link, create the new page in the DOM, then kick off a page transition. View the <a href="../api/data-attributes.html">data- attribute reference</a> to see all the possible attributes you can add to listviews.</p>
			<p>Here is the HTML markup for a basic linked list.</p>

<pre><code>
&lt;ul data-role=&quot;listview&quot;&gt;
	&lt;li&gt;&lt;a href=&quot;acura.html&quot;&gt;Acura&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;audi.html&quot;&gt;Audi&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;bmw.html&quot;&gt;BMW&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</code></pre>

		<p><iframe src="/resources/listview/example1.html" style="width:100%;height:940px;border:0px"></iframe></p>

				<p><strong>Style note on non-inset lists</strong>: all standard, non-inset lists have a -15px margin to negate the 15px of padding on the content area to make lists extend to the edges of the screen. If you add other widgets above or below a list, the negative margin may make these elements overlap so you'll need to add additional spacing in your custom CSS.</p>
			
			<h3>Nested lists</h3>
			<p>By nesting child <code>ul</code> or <code>ol</code> inside list items, you can create nested lists. When a list item with a child list is clicked, the framework will show a new page populated with the title of the parent in the header and the list of child elements. These dynamic nested lists are styled with the "b" theme swatch (blue in the default theme) to indicate that you are in a secondary level of navigation. Lists can be nested multiple levels deep and all pages and linking will be automatically handled by the framework. Note that the page of each nested listview is created when the parent page loads and for each nested page the page-events will trigger. Please also note that the title of subpages will contain the text of the first element in the parent list item including its elements. So make sure to use a single element for the list item caption and put other elements like count bubbles behind that caption as shown in the demo below.</p>
			<p>To <a href="../lists/lists-themes.html">set the swatch color</a> of the child listviews, set the <code>data-theme</code> attribute on each list inside.</p>
			<p><iframe src="/resources/listview/example2.html" style="width:100%;height:640px;border:0px"></iframe></p>

			<h3>Numbered lists</h3>
			<p>Lists can also be created from ordered lists (<code>ol</code>) which is useful when presenting items that are in a sequence such as search results or a movie queue. When the enhanced markup is applied to the listview, jQuery Mobile will try to first use CSS to add numbers to the list and, if not supported, will fall back to injecting numbers with JavaScript.</p>

			<p><iframe src="/resources/listview/example3.html" style="width:100%;height:940px;border:0px"></iframe></p>

			<h3>Read-only lists</h3>
			<p>Listviews can also be used to display a non-interactive list of items, usually as an inset list. This list is built from an unordered or ordered list that don't have linked list items. The framework styles the list items as buttons like the other list types (see <a href="../lists/lists-themes.html">theming lists</a>), but without a gradient on the background.</p>

			<p><iframe src="/resources/listview/example4.html" style="width:100%;height:2240px;border:0px"></iframe></p>

			<h3>Split button lists</h3>
			<p>In cases where there is more than one possible action per list item, a split button can be used to offer two independently clickable items - the list item and a small arrow icon in the far right. To make a split list item, simply add a second link inside the <code>li</code> and the framework will add a vertical divider line, style the link as an icon-only arrow button, and set the <code>title</code> attribute of the link to the text of the link for accessibility.</p>
			<p>You can set the icon for the right split icon by specifying a <code>data-split-icon</code> attribute on the listview with an <a href="../buttons/buttons-icons.html">icon name</a> you want. The default icon is "arrow-r" but can be configured with the <code>splitIcon</code> <a href="../lists/lists-options.html">listview option</a>. By adding a <code>data-icon</code> attribute to the list item, you can set individual icons for each split. The theme swatch color of the split button defaults to "b" (blue in the default theme) but can be set by specifying a swatch letter with the <code>data-split-theme</code> attribute at the listview level or for individual splits with the <code>data-theme</code> attribute at the link level.</p>

			<p><iframe src="/resources/listview/example5.html" style="width:100%;height:950px;border:0px"></iframe></p>

			<h3>List dividers</h3>
			<p>List items can be turned into dividers to organize and group the list items. This is done by adding the <code> data-role="list-divider"</code> to any list item. These items are styled with the bar swatch "b" by default (blue in the default theme) but you can specify a theme for dividers by adding the <code>data-divider-theme</code> attribute to the list element (<code>ul</code> or <code>ol</code>) and specifying a theme swatch letter.</p>

			<p><iframe src="/resources/listview/example6.html" style="width:100%;height:1410px;border:0px"></iframe></p>

			<h3>Autodividers</h3>

			<p>A listview can be configured to automatically generate dividers for its items. This is done by adding a <code>data-autodividers="true"</code> attribute to any listview.</p>

			<p>By default, the text used to create dividers is the uppercased first letter of the item's text. Alternatively you can specify divider text by setting the <code>autodividersSelector</code> option on the listview programmatically. For example, to add a custom selector to the element with <code>id="mylistview"</code>:</p>

<pre><code>
$("#mylistview").listview({
  autodividers: true,

  // the selector function is passed a &lt;li&gt; element from the listview;
  // it should return the appropriate divider text for that &lt;li&gt;
  // element as a string
  autodividersSelector: function ( li ) {
    var out = /* generate a string based on the content of li */;
    return out;
  }
});
</code></pre>

			<p>Note that if you are using formatted list items that contain a floating element (for example <code>ui-li-aside</code>), this element precedes its siblings regardless of the order in your HTML markup. This results in the first character of the floating element being used as divider text. Therefore it is recommended to specify the divider text in this case.</p>
			
			<p>If new list items are added to the list or removed from it, the dividers are <em>not</em> automatically updated: you should call <code>refresh()</code> on the listview to redraw the autodividers.</p>

			<p><iframe src="/resources/listview/example7.html" style="width:100%;height:1410px;border:0px"></iframe></p>

			<h3>Search filter</h3>
			<p>jQuery Mobile provides a very easy way to filter a list with a simple client-side search feature. To make a list filterable, simply add the <code>data-filter="true"</code> attribute to the list. The framework will then append a search box above the list and add the behavior to filter out list items that don't contain the current search string as the user types. The input's placeholder text defaults to "Filter items...". To configure the placeholder text in the search input, you can either <a href="../api/globalconfig.html">bind to the <code>mobileinit</code> event</a> and set the <code>$.mobile.listview.prototype.options.filterPlaceholder</code> option to a string of your choosing, or use the data attribute <code>data-filter-placeholder</code> on your listview. By default the search box will inherit its theme from its parent. The search box theme can be configured using the data attribute <code>data-filter-theme</code> on your listview.</p>

			<p><iframe src="/resources/listview/example8.html" style="width:100%;height:1010px;border:0px"></iframe></p>

      		<p>If you want to change the way in which list items are filtered, i.e. fuzzy search or matching from the beginning of the string, you can configure the callback used internally by defining <code>$.mobile.listview.prototype.options.filterCallback</code> during <code>mobileinit</code> or after the widget has been created with <code>$("#mylist").listview('option', 'filterCallback', yourFilterFunction)</code>. Any function defined for the callback will be provided three arguments. First, the text of the current list item, second the value being searched for, and third the list item being filtered. A truthy value will result in a hidden list item. The default callback which filters entries without the <code>searchValue</code> as a substring is described below:
      		</p>

<pre><code>
function( text, searchValue, item ){
  return text.toString().toLowerCase().indexOf( searchValue ) === -1;
};
</code></pre>

			<p>To filter list items by values other than the text, add a <code>data-filtertext</code> attribute to the list item.  The value of this attribute will be passed as the first argument to the <code>filterCallback</code> function instead of the text. Alternately you can use an attribute of your choosing as defined on the list item itself.</p>

			<p>By default, the listview filter simply searches against the content in each list item. If you want the filter to search against different content, add the <code>data-filtertext</code>	attribute to the item and populate it with one or many keywords and phrases that should be used to match against. Note that if this attribute is added, the contents of the list item are ignored.</p>
			<p>This attribute is useful for dealing with allowing for ticker symbols and full company names to be searched, or for covering common spellings and abbreviations for countries.</p>
			
<pre><code>		
&lt;li data-filtertext=&quot;NASDAQ:AAPL Apple Inc.&quot;&gt;&lt;a href=&quot;#&quot;&gt;Apple&lt;/a&gt;&lt;/li&gt;
&lt;li data-filtertext=&quot;USA U.S.A. United States of America&quot;&gt;&lt;a href=&quot;#&quot;&gt;United States&lt;/a&gt;&lt;/li&gt;
</code></pre>	

			<p><iframe src="/resources/listview/example9.html" style="width:100%;height:410px;border:0px"></iframe></p>

			<h3>Text formatting &amp; counts</h3>
			<p>The framework includes text formatting conventions for common list patterns like header/descriptions, secondary information and counts through semantic HTML markup.</p>

			<ul>
				<li>To add a count indicator to the right of the list item, wrap the number in an element with a class of <code>ui-li-count</code></li>
				<li>To add text hierarchy, use headings to increase font emphasis and use paragraphs to reduce emphasis. </li>
				<li>Supplemental information can be added to the right of each list item by wrapping content in an element with a class of <code>ui-li-aside</code></li>
			</ul>
			
			<p><iframe src="/resources/listview/example10.html" style="width:100%;height:240px;border:0px"></iframe></p>
			<p><iframe src="/resources/listview/example11.html" style="width:100%;height:940px;border:0px"></iframe></p>
			
			<h3>Thumbnails &amp; icons</h3>
			<p>To add thumbnails to the left of a list item, simply add an image inside a list item as the first child element. The framework will scale the image to 80 pixels square. To use standard 16x16 pixel icons in list items, add the class of <code>ui-li-icon</code> to the image element.</p>
			
			<p><iframe src="/resources/listview/example12.html" style="width:100%;height:940px;border:0px"></iframe></p>
			<p><iframe src="/resources/listview/example13.html" style="width:100%;height:290px;border:0px"></iframe></p>			

			<h3>Inset lists</h3>
			<p>If lists are embedded in a page with other types of content, an inset list packages the list into a block that sits inside the content area with a bit of margin and rounded corners (theme controlled). By adding the <code> data-inset="true"</code> attribute to the list (ul or ol), applies the inset appearance.</p>

			<p><iframe src="/resources/listview/example14.html" style="width:100%;height:2240px;border:0px"></iframe></p>			

			<h3>Calling the listview plugin</h3>
			
			<p>You can directly call the listview plugin on any selector, just like any jQuery plugin:</p>
<pre><code>
$('#mylist').listview();
</code></pre>

			<h3>Updating lists</h3>
			<p>If you add items to a listview, you'll need to call the <code>refresh()</code> method on it to update the styles and create any nested lists that are added. For example:</p>
<pre><code>
$('#mylist').listview('refresh');
</code></pre>

			<p>Note that the <code>refresh()</code> method only affects <strong>new nodes</strong> appended to a list. This is done for performance reasons. Any list items already enhanced will be ignored by the refresh process. This means that if you change the contents or attributes on an already enhanced list item, these won't be reflected. If you want a list item to be updated, replace it with fresh markup before calling refresh.</p>
			
			<p>If you initially want to hide a list item you can do this by adding a class of <strong><code>ui-screen-hidden</code></strong> to the li element. Using this class ensures the corner styling is applied correctly as well as border-bottom on the last visible item.</p>
	</longdesc>
	<added>1.0</added>
	<options>
		<option name="countTheme" default='"c"'>
			<desc>Sets the color scheme (swatch) for list item count bubbles. It accepts a single letter from a-z that maps to one of the swatches included in your theme.
<pre><code>
$( document ).bind( "mobileinit", function(){
	$.mobile.listview.prototype.options.countTheme = "a";
});</code></pre>
				<p>This option is also exposed as a data attribute: <code>data-count-theme="a"</code>.</p>
			</desc>
			<type name="String" />
		</option>
		<option name="dividerTheme" default='"b"'>
			<desc>Sets the color scheme (swatch) for list dividers. It accepts a single letter from a-z that maps to one of the swatches included in your theme.
<pre><code>
$( document ).bind( "mobileinit", function(){
	$.mobile.listview.prototype.options.dividerTheme = "a";
});</code></pre>
				<p>This option is also exposed as a data attribute: <code>data-divider-theme="a"</code>.</p>
			</desc>
			<type name="String" />
		</option>
		<option name="filter" default="false">
			<desc>Adds a search filter bar to listviews.
<pre><code>
$( document ).bind( "mobileinit", function(){
	$.mobile.listview.prototype.options.filter = true;
});</code></pre>
				<p>This option is also exposed as a data attribute: <code>data-filter="true"</code>.</p>
			</desc>
			<type name="Boolean" />
		</option>
		<option name="filterCallback" default="n/a">
			<desc>The function to determine which rows to hide when the search filter textbox changes. The function accepts two arguments -- the text of the list item (or data-filtertext value if present), and the search string. Return true to hide the item, false to leave it visible.
<pre><code>
$( document ).bind( "mobileinit", function(){
	$.mobile.listview.prototype.options.filterCallback = function( text, searchValue ) {
		// only show items that *begin* with the search string
		return text.toLowerCase().substring( 0, searchValue.length ) !== searchValue;
	};
});</code></pre>
			</desc>
			<type name="Function" />
		</option>
		<option name="filterPlaceholder" default='"Filter items..."'>
			<desc>The placeholder text used in search filter bars. 
<pre><code>
$( document ).bind( "mobileinit", function(){
	$.mobile.listview.prototype.options.filterPlaceholder = "Search...";
});</code></pre>
				<p>This option is also exposed as a data attribute: <code>data-filter-placeholder="Search..."</code>.</p>
			</desc>
			<type name="String" />
		</option>
		<option name="filterTheme" default='"c"'>
			<desc>Sets the color scheme (swatch) for the search filter bar. It accepts a single letter from a-z that maps to one of the swatches included in your theme.
<pre><code>
$( document ).bind( "mobileinit", function(){
	$.mobile.listview.prototype.options.filterTheme = "a";
});</code></pre>
				<p>This option is also exposed as a data attribute: <code>data-filter-theme="a"</code>.</p>
			</desc>
			<type name="String" />
		</option>
		<option name="headerTheme" default='"c"'>
			<desc>Sets the color scheme (swatch) for headers of nested list sub pages. It accepts a single letter from a-z that maps to one of the swatches included in your theme. 
<pre><code>
$( document ).bind( "mobileinit", function(){
	$.mobile.listview.prototype.options.headerTheme = "a";
});
</code></pre>
				<p>This option is also exposed as a data attribute: <code>data-header-theme="a"</code>.</p>
			</desc>
			<type name="String" />
		</option>
		<option name="icon" default='"arrow-r"'>
			<desc>Applies an icon from the icon set to all linked list buttons. 
<pre><code>
$( document ).bind( "mobileinit", function(){
	$.mobile.listview.prototype.options.icon = "star";
});
</code></pre>
				<p>This option is also exposed as a data attribute: <code>data-icon="star"</code>.</p>
			</desc>
			<type name="String" />
		</option>
		<option name="initSelector" default=":jqmData(role='listview')">
			<desc>This is used to define the selectors (element types, data roles, etc.) that will automatically be initialized as listviews. 
<pre><code>
$( document ).bind( "mobileinit", function(){
	$.mobile.listview.prototype.options.initSelector = ".mylistview";
});
</code></pre>
			</desc>
			<type name="CSS selector string" />
		</option>
		<option name="inset" default="false">
			<desc>Adds inset list styles. 
<pre><code>
$( document ).bind( "mobileinit", function(){
	$.mobile.listview.prototype.options.inset = true;
});
</code></pre>
				<p>This option is also exposed as a data attribute: <code>data-inset="true"</code>.</p>
			</desc>
			<type name="Boolean" />
		</option>
		<option name="splitIcon" default='"arrow-r"'>
			<desc>Applies an icon from the icon set to all split list buttons.
<pre><code>
$( document ).bind( "mobileinit", function(){
	$.mobile.listview.prototype.options.splitIcon = "star";
});
</code></pre>
				<p>This option is also exposed as a data attribute: <code>data-split-icon="star"</code>.</p>
			</desc>
			<type name="String" />
		</option>
		<option name="splitTheme" default='"b"'>
			<desc>Sets the color scheme (swatch) for split list buttons. It accepts a single letter from a-z that maps to one of the swatches included in your theme.
<pre><code>
$( document ).bind( "mobileinit", function(){
	$.mobile.listview.prototype.options.splitTheme = "a";
});
</code></pre>
				<p>This option is also exposed as a data attribute: <code>data-split-theme="a"</code>.</p>
			</desc>
			<type name="String" />
		</option>
		<option name="theme" default="null, inherited from parent">
			<desc>Sets the color scheme (swatch) for this widget. It accepts a single letter from a-z that maps to one of the swatches included in your theme. By default, it will inherit the same swatch color as its parent container if not explicitly set.
<pre><code>
$( document ).bind( "mobileinit", function(){
    $.mobile.listview.prototype.options.theme = "a";
});
</code></pre>
				<p>Possible values: swatch letter (a-z).</p>
				<p>This option is also exposed as a data attribute: <code>data-theme="a"</code>.</p>
			</desc>
			<type name="String" />
		</option>
	</options>
	<events>
		<event name="create" type="listviewcreate">
			<desc>triggered when a listview is created</desc>
<pre><code>
$( ".selector" ).listview({
	create: function(event, ui) { ... }
});
</code></pre>
		</event>
	</events>
	<methods>
		<method name="childPages">
			<desc>retrieve the sub-pages.
			<p>This method returns a jQuery object containing all the immediate child pages of a nested list.</p>
<pre><code>
$('.selector').listview('childPages');
</code></pre>
			</desc>
		</method>
		<method name="refresh">
			<desc>update the listview.
				<p>If you manipulate a listview via JavaScript (e.g. add new LI elements), you must call the refresh method on it to update the visual styling.</p>
<pre><code>
$('.selector').listview('refresh');
</code></pre>
			</desc>
		</method>
	</methods>
	<example>
		<desc>A basic example of a listview</desc>
		<code><![CDATA[]]></code>
		<html><![CDATA[  
		<ul data-role="listview">
			<li><a href="index.html">Acura</a></li>
			<li><a href="index.html">Audi</a></li>
			<li><a href="index.html">BMW</a></li>
			<li><a href="index.html">Cadillac</a></li>
			<li><a href="index.html">Chrysler</a></li>
		</ul>	]]></html>
	</example>
	<category slug="widgets"/>
</entry>