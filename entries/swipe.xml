<?xml version="1.0"?>
<entry name="swipe" type="event" return="jQuery">
	<title>swipe</title>
	<desc>Triggered when a horizontal drag of 30px or more (and less than 75px vertically) occurs within 1 second duration.</desc>
	<longdesc>
		<p>Triggered when a horizontal drag of 30px or more (and less than 75px vertically) occurs within 1 second duration but these can be configured:
			<ul>
				<li><code>$.event.special.swipe.scrollSupressionThreshold</code> (default: 10px) – More than this horizontal displacement, and we will suppress scrolling.</li>
				<li><code>$.event.special.swipe.durationThreshold</code> (default: 1000ms) – More time than this, and it isn't a swipe.</li>
				<li><code>$.event.special.swipe.horizontalDistanceThreshold</code> (default: 30px) – Swipe horizontal displacement must be more than this.</li>
				<li><code>$.event.special.swipe.verticalDistanceThreshold</code> (default: 75px) – Swipe vertical displacement must be less than this.</li>
			</ul>
		</p>
		<p>The swipe event can also be extend to add your own logic or functionality. The following methods can be extended:</p>
			<ul>
				<li><code>$.event.special.swipe.start</code> Default:
<pre><code>
function( event ) {
	var data = event.originalEvent.touches ?
			event.originalEvent.touches[ 0 ] : event;
	return {
			time: ( new Date() ).getTime(),
			coords: [ data.pageX, data.pageY ],
			origin: $( event.target )
		};
}
</code></pre>
			  	<p>This method recieves a touchstart event and returns an object of data about the starting location.</p>
			  	</li>
			  	<li><code>$.event.special.swipe.stop</code> Default:
<pre><code>
function( event ) {
	var data = event.originalEvent.touches ?
			event.originalEvent.touches[ 0 ] : event;
	return {
			time: ( new Date() ).getTime(),
			coords: [ data.pageX, data.pageY ]
		};
}
</code></pre>
			  	<p>This method recieves a touchend event and returns an object of data about the ending location.</p>
			  	</li>
			  	<li><code>$.event.special.swipe.handleSwipe</code> Default:
<pre><code>
function( start, stop ) {
	if ( stop.time - start.time &lt; $.event.special.swipe.durationThreshold &amp;&amp;
		Math.abs( start.coords[ 0 ] - stop.coords[ 0 ] ) &gt; $.event.special.swipe.horizontalDistanceThreshold &amp;&amp;
		Math.abs( start.coords[ 1 ] - stop.coords[ 1 ] ) &lt; $.event.special.swipe.verticalDistanceThreshold ) {

		start.origin.trigger( "swipe" )
			.trigger( start.coords[0] &gt; stop.coords[ 0 ] ? "swipeleft" : "swiperight" );
	}
}
</code></pre>
			  	<p>This method recieves the start and stop objects and handles the logic for and triggering for the swipe events.</p>
			  	</li>
			  </ul>
			  
		<pre>
		<code><![CDATA[
			<style type="text/css">
				div.box {
					background-color: #108040;
					height: 3em;
					width: 30em;
				}
				div.box.swipe {
					background-color: #B24926;
				}
			</style>
			
			...

			<div class="box"></div>
			
			...
		    
			$(function(){
				// Bind the swipeHandler callback function to the swipe event on div.box
				$('div.box').on( 'swipe', swipeHandler );

				// Callback function references the event target and adds the 'swipe' class to it
				function swipeHandler( event ){
					$(event.target).addClass( 'swipe' );
				}
			});
		]]></code>
	</pre>
	<p>Swipe the green rectangle to see the above code applied.
		<iframe id="swipeIframe" src="/resources/swipe/example1.html" style="width:100%;height:110px;border:0px"></iframe></p>
	</longdesc>
	<added>1.0</added>
	<signature>
		<argument name="callback" type="Function" optional="true">
			<desc>A function to invoke after the the swipe event fires.</desc>
		</argument>
	</signature>
	<category slug="events"/>
</entry>
