<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="../entries2html.xsl" ?>
<entry name="popup" namespace="fn" type="widget" widgetnamespace="mobile" event-prefix="popup" init-selector=":jqmData(role=&#39;popup&#39;)">
	<title>Popup Widget</title>
	<desc>Opens content in a popup.</desc>
	<longdesc>
		<h2>Popups</h2>
		<p>To create a popup, add the <code>data-role="popup"</code> attribute to a div with the popup contents. Then create a link with the <code>href</code> set to the <code>id</code> of the popup div, and add the attribute <code>data-rel="popup"</code> to tell the framework to open the popup when the link is tapped. This is a similar markup pattern to the <a href="../dialog/">dialog</a> widget. A popup div has to be nested inside the same page as the link.</p>

<pre><code><![CDATA[
<a href="#popupBasic" data-rel="popup">Open Popup</a>

<div data-role="popup" id="popupBasic">
	<p>This is a completely basic popup, no options set.</p>
</div>
]]></code></pre>

		<p>This will result in the following popup:
		<iframe src="/resources/popup/example1.html" style="width:100%;height:90px;border:0px"></iframe></p>

		<p>The popup consists of two elements: the screen, which is a transparent or translucent element that covers the entire document, and the container, which is the popup itself. If your original element had an <code>id</code> attribute, the screen and the container will each receive an <code>id</code> attribute based on it. The screen's <code>id</code> will be suffixed with "-screen", and the container's <code>id</code> will be suffixed with "-popup" (in the above example, <code>id="popupBasic-screen"</code> and <code>id="popupBasic-popup"</code>, respectively).</p>

		<p>The framework adds a small amount of margin to text elements, but it's really just a container with <strong>rounded corners</strong> and a <strong>shadow</strong> which serves as a blank slate for your designs (even these features can be disabled via options). Please note that if you want to add a header to the popup and also have a closing button, the markup for the header must come first.</p>

		<p>This simple styling makes it easy to add in widgets to create a variety of different interactions. Here are a few real-world examples that combine the various settings and styles you can achieve out of the box with popups:
		<iframe src="/resources/popup/example2.html" style="width:100%;height:590px;border:0px"></iframe>
		</p>

		<h2>Scaling images: Lightbox examples</h2>

		<p>The framework CSS contains rules that make images that are immediate children of the popup scale to fit the screen. Because of the absolute positioning of the popup container and screen, the height is not adjusted to screen height on all browsers. You can prevent vertical scrolling with a simple script that sets the <code>max-height</code> of the image.</p>

		<p>In the two examples below the divs with <code>data-role="popup"</code> have a class of <code>photopopup</code>.
		<iframe src="/resources/popup/example3.html" style="width:100%;height:590px;border:0px"></iframe>
		</p>

		<p>The handler is bound to the <code>popupbeforeposition</code> event, which ensures the image is not only scaled before it is shown but also when the window is resized (e.g. orientation change). In this code example the height is reduced by 60 to take a top and bottom tolerance of 30 pixels into account.</p>

<pre><code><![CDATA[
$( document ).on( "pageinit", function() {
    $( ".photopopup" ).on({
        popupbeforeposition: function() {
            var maxHeight = $( window ).height() - 60 + "px";
            $( ".photopopup img" ).css( "max-height", maxHeight );
        }
    });
});
]]></code></pre>

		<h2>Working with iframes in popups</h2>

		<p>You may need to embed an iframe into a popup to use a 3rd party widget. Here, we'll walk through a few real-world examples of working with iframes: videos and maps.</p>

		<h3>Video example</h3>

		<p>Here is an example of a 3rd party video player embedded in a popup:
		<iframe src="/resources/popup/example4.html" style="width:100%;height:390px;border:0px"></iframe></p>

		<p>The markup is an iframe inside a popup container. The popup will have a 15 pixels padding because of class <code>ui-content</code> and a one pixel border because the framework will add class <code>ui-body-a</code> to the popup.</p>

<pre><code><![CDATA[
<div data-role="popup" id="popupVideo" data-overlay-theme="b" data-theme="a" data-tolerance="15,15" class="ui-content">

    <iframe src="http://player.vimeo.com/video/41135183" width="497" height="298" seamless></iframe>

</div>
]]></code></pre>

		<p>When using an iframe inside a popup it is important to initially <strong>set the width and height attributes to 0</strong>. This prevents the page to breaking on platforms like Android 2.3. Note that you have to set the attributes, because setting the width and height with CSS is not sufficient. You can leave the actual width and height in the markup for browsers that have JavaScript disabled and use <code>attr()</code> to set the zero values upon the <code>pageinit</code> event.</p>

		<p>Next, bind to the <code>popupbeforeposition</code> event to set the desired size of the iframe when the popup is shown or when the window is resized (e.g. orientation change). For the iframe examples on this page a custom function <code>scale()</code> is used to scale down the iframe to fit smaller screens. Expand the section below to view the code of this function.</p>

		<div data-role="collapsible" data-content-theme="a">
			<h3><code>scale()</code></h3>
			<p>The window width and height are decreased by 30 to take the tolerance of 15 pixels at each side into account.</p>

<pre><code><![CDATA[
function scale( width, height, padding, border ) {
    var scrWidth = $( window ).width() - 30,
        scrHeight = $( window ).height() - 30,
        ifrPadding = 2 * padding,
        ifrBorder = 2 * border,
        ifrWidth = width + ifrPadding + ifrBorder,
        ifrHeight = height + ifrPadding + ifrBorder,
        h, w;

    if ( ifrWidth < scrWidth && ifrHeight < scrHeight ) {
        w = ifrWidth;
        h = ifrHeight;
    } else if ( ( ifrWidth / scrWidth ) > ( ifrHeight / scrHeight ) ) {
        w = scrWidth;
        h = ( scrWidth / ifrWidth ) * ifrHeight;
    } else {
        h = scrHeight;
        w = ( scrHeight / ifrHeight ) * ifrWidth;
    }

    return {
        'width': w - ( ifrPadding + ifrBorder ),
        'height': h - ( ifrPadding + ifrBorder )
    };
};
]]></code></pre>
			<p><strong>Note:</strong> This function is not part of the framework. Copy the code into your script to use it.</p>
		</div>

		<p>When the popup is closed the width and height should be set back to 0. You can do this by binding to the <code>popupafterclose</code> event.</p>

		<p>This is the complete script and the link to open the video popup:</p>

<pre><code><![CDATA[
$( document ).on( "pageinit", function() {
    $( "#popupVideo iframe" )
        .attr( "width", 0 )
        .attr( "height", 0 );

    $( "#popupVideo" ).on({
        popupbeforeposition: function() {
            var size = scale( 497, 298, 15, 1 ),
                w = size.width,
                h = size.height;

            $( "#popupVideo iframe" )
                .attr( "width", w )
                .attr( "height", h );
        },
        popupafterclose: function() {
            $( "#popupVideo iframe" )
                .attr( "width", 0 )
                .attr( "height", 0 );
        }
    });
});
]]></code></pre>

		<p>Note that the video will still be playing in the iframe when the popup is closed. If available you can use the 3rd party API to stop the video on the <code>popupafterclose</code> event. Another way is to create the iframe when the popup is opened and destroy it when the popup is closed, but this would drop support for browsers that have JavaScript disabled.</p>

		<h3>Map example</h3>
		<p>In the second example, an iframe is used to display <strong>Google Maps API</strong>. Using an iframe prevents issues with the controls of the map.
		<iframe src="/resources/popup/example5.html" style="width:100%;height:390px;border:0px"></iframe></p>

		<p>This is the markup of the popup including a right close button:</p>

<pre><code><![CDATA[
<div data-role="popup" id="popupMap" data-overlay-theme="b" data-theme="b" data-corners="false" data-tolerance="15,15">

    <a href="#" data-rel="back" data-role="button" data-theme="b" data-icon="delete" data-iconpos="notext" class="ui-btn-right">Close</a>

    <iframe src="map.html" width="480" height="320" seamless></iframe>

</div>
]]></code></pre>

		<p>Expand the section below to view the source of the iframe.</p>

		<div data-role="collapsible" data-content-theme="a">
			<h3><code>map.html</code></h3>
<pre><code><![CDATA[
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>Map</title>
    <script>
        function initialize() {
            var myLatlng = new google.maps.LatLng( 51.520838, -0.140261 );
            var myOptions = {
                zoom: 15,
                center: myLatlng,
                mapTypeId: google.maps.MapTypeId.ROADMAP
            }
            var map = new google.maps.Map( document.getElementById( "map_canvas" ), myOptions );
        }
    </script>
    <script src="http://maps.google.com/maps/api/js?sensor=false"></script>
    <style>
        html {
            height: 100%;
            overflow: hidden;
        }
        body {
            margin: 0;
            padding: 0;
            height: 100%;
        }
        #map_canvas {
            height: 100%;
        }
    </style>
</head>
<body onload="initialize()">

    <div id="map_canvas"></div>

</body>
</html>
]]></code></pre>
		</div>

		<p>Setting the size of the iframe is done exactly the same as for the video example, with one exception. You should also set the width and height of the div that contains the map to prevent the page from breaking on platforms like Android 2.3. In this example the ID of this div is <code>#map_canvas</code>.</p>

		<p>This is the complete script and the link to open the map popup:</p>

<pre><code><![CDATA[
$( document ).on( "pageinit", function() {
    $( "#popupMap iframe" )
        .attr( "width", 0 )
        .attr( "height", 0 );

    $( "#popupMap iframe" ).contents().find( "#map_canvas" )
        .css( { "width" : 0, "height" : 0 } );

    $( "#popupMap" ).on({
        popupbeforeposition: function() {
            var size = scale( 480, 320, 0, 1 ),
                w = size.width,
                h = size.height;

            $( "#popupMap iframe" )
                .attr( "width", w )
                .attr( "height", h );

            $( "#popupMap iframe" ).contents().find( "#map_canvas" )
                .css( { "width": w, "height" : h } );
        },
        popupafterclose: function() {
            $( "#popupMap iframe" )
                .attr( "width", 0 )
                .attr( "height", 0 );

            $( "#popupMap iframe" ).contents().find( "#map_canvas" )
                .css( { "width": 0, "height" : 0 } );
        }
    });
});
]]></code></pre>

		<h3>Calling the popup plugin</h3>
		<p>This plugin will autoinitialize on any page that contains a div with the attribute <code>data-role="popup"</code>. However, if needed you can directly call the <code>popup</code> plugin on any selector, just like any jQuery plugin and programmatically work with the popup options, methods, and events API:</p>

<pre><code><![CDATA[
$( "#myPopupDiv" ).popup();
]]></code></pre>

		<h3>Opening popups</h3>
		<p>Using the markup-based configuration, when a link with the <code>data-rel="popup"</code> is tapped, the corresponding popup container with the id referenced in the <code>href</code> of the link will be shown. To open a popup programmatically, call popup with the <code>open</code> method on the popup container:</p>

<pre><code><![CDATA[
$( "#myPopupDiv" ).popup( "open" )
]]></code></pre>

		<h3>Closing popups</h3>
		<p>By default popups can be closed either by clicking outside the popup widget or by pressing the <code>Esc</code> key. To prevent this, the <code>data-dismissible="false"</code> attribute can be added to the popup. Popups can also be closed via the <code>close</code> method:</p>

<pre><code><![CDATA[
$( "#myPopupDiv" ).popup( "close" )
]]></code></pre>

		<p>To add an explicit close button to a popup, add a link with the role of button into the popup container with a <code>data-rel="back"</code> attribute which will close the popup when tapped. We have created helper classes to position buttons in the upper left (<code>ui-btn-left</code>) or upper right (<code>ui-btn-right</code>) of the popup but you may need to tweak these or add custom positioning styles depending on your design. We recommend adding standard content padding to the popup to make room for the buttons (see next section).</p>

<pre><code><![CDATA[
<div data-role="popup">
	<a href="#" data-rel="back" data-role="button" data-theme="a" data-icon="delete" data-iconpos="notext" class="ui-btn-right">Close</a>
	...popup contents go here...
</div>
]]></code></pre>

		<p><iframe src="/resources/popup/example7.html" style="width:100%;height:390px;border:0px"></iframe></p>

		<h3>Adding padding</h3>

		<p>For popups with formatted text, padding is needed. We recommend adding the <code>ui-content</code> class to the popup container which adds the standard 1em (16px) of padding, just like the page content container. Write your own styles to create a more customized design if needed.</p>

<pre><code><![CDATA[
<a href="#popupPadded" data-rel="popup" data-role="button">Popup with padding</a>

<div data-role="popup" id="popupPadded" class="ui-content">
	<p>This is a popup with the <code>ui-content</code> class added to the popup container.</p>
</div>
]]></code></pre>

		<p>This will result in the following popup with content padding:
		<iframe src="/resources/popup/example8.html" style="width:100%;height:190px;border:0px"></iframe></p>

		<p>When padding is added, we apply a few style rules to negate the top margin for the first heading or paragraph in the popup and do the same for the last element's bottom margin. This keep the popups from having too much vertical space when the content padding and element margins combine.</p>

		<h3>Positioning options</h3>
		<p>By default, popups open centered vertically and horizontally over the thing you clicked (the origin) which is good for popups used as tooltips or menus. The framework also applies some basic collision detection rules to ensure that the popup will appear on-screen so the ultimate position may not always be centered over the origin.</p>
		<p>For situations like a dialog or lightbox where the popup should appear centered within the window instead of over the origin, add the <code>data-position-to</code> attribute to the <strong>link</strong> and specify a value of <code>window</code>.</p>
		<p>It's also possible to specify any valid selector as the value of <code>position-to</code> in addition to <code>origin</code> and <code>window</code>. For example, if you add <code>data-position-to="#myElement"</code> the popup will be positioned over the element with the id <code>myElement</code>.</p>

		<p>A few examples:
		<iframe src="/resources/popup/example9.html" style="width:100%;height:390px;border:0px"></iframe></p>

		<p>The popup's placement constraints, which may cause the popup not to appear centered as desired, are as follow:</p>
		<ol>
			<li>The width of the popup will be limited using CSS <code>max-width</code> to the width of the window minus a tolerance of 15px on either side.</li>
			<li>A tolerance from the edges of the window (15px from each of the sides and 30px from the top and the bottom) will be observed when the popup fits inside the window. Tall popups are allowed to overflow the top and bottom edges of the window. Those parts of the popup can be viewed by manually scrolling the document. This tolerance can be configured via the  <a href="#option-tolerance">tolerance</a> option.</li>
			<li>The top coordinate of the popup will never be negative. This ensures that the top of the popup will not be cut off.</li>
			<li>If centering the popup over an element would cause the overall height of the document to increase, the popup is shifted upwards at most until its top coordinate becomes 0.</li>
		</ol>

		<p>Also note that a popup is currently always placed at the center of the window after an orientation change or window resize event.</p>

		<p>See <a href="#methods">methods</a> for information about setting the popup position programmatically, including the option to specify <strong>x and y coordinates</strong>.</p>

		<h3>Setting transitions</h3>
		<p>By default, popups have no transition to make them open as quickly as possible. To set the transition used for a popup, add the <code>data-transition</code> attribute to the link that references the popup. The reverse version of the transition will be used when closing the popup.</p>

<pre><code><![CDATA[
<a href="#transitionExample" data-transition="flip" data-rel="popup">
   Flip transition
</a>
]]></code></pre>

		<p>For performance reasons on mobile devices, we recommend using simpler transitions like pop, fade or none for smooth and fast popup animations, especially with larger or complex widgets within a popup. To view all transition types, you must be on a browser that supports 3D transforms. By default, devices that lack 3D support (such as Android 2.x) will fallback to "fade" for all transition types. See the transitions page for detailed information on the transition system.
		<iframe src="/resources/popup/example10.html" style="width:100%;height:390px;border:0px"></iframe></p>

		<p>When you launch the popup from any of the buttons, the <code>data-transition</code> set on the button will be used. However, if you launch the popup programmatically, such as via <code>$( "#transitionExample" ).popup( "open" )</code>, the <code>data-transition</code> attribute specified in the definition of the popup will be used if present.</p>

		<h3>Theming the popup and overlay</h3>

		<p>The <code>popup</code> plugin provides two theme-related options: <code>data-theme</code> and <code>data-overlay-theme</code>. The <code>data-theme</code> option refers to the theme of the popup itself, whereas <code>data-overlay-theme</code> refers to the theme of the popup's background, which covers the entire window behind the popup.</p>
		<p><code>data-theme</code> will be inherited from the page, and will always have a valid value when the popup opens, unless you explicitly specify <code>data-theme=&quot;none&quot;</code>, in which case the popup will have a transparent background.</p>
		<p>The <code>data-overlay-theme</code> will never be set, and the popup's background, although always present when the popup is shown, will be completely transparent, unless explicitly set using for example <code>data-overlay-theme=&quot;b&quot;</code>. In this case, the background will fade in, partially obscuring the rest of the window, to further direct attention to the popup. Here is an example of an explicitly themed popup:</p>

<pre><code><![CDATA[
<div id="both" data-role="popup" data-theme="b" data-overlay-theme="a" class="ui-content">
  ...Popup contents...
</div>
]]></code></pre>

		<iframe src="/resources/popup/example11.html" style="width:100%;height:390px;border:0px"></iframe>

		<h3>Arrows</h3>
		<p>The extension <code>widgets/popup.arrow</code> provides the <code>arrow</code> option, which is also exposed as a data attribute. For example, <code>data-arrow="t,b"</code> will result in the popup being displayed with a top or a bottom arrow.</p>
		<p>When an arrow is requested using the <code>arrow</code> option, the popup is positioned along one of the edges of the popup such that the arrow points at the center of the origin. The value of the <code>arrow</code> option is a comma-separated list of letters referring to the edges of the popup along which the framework should attempt to place the arrow:
			<table>
				<tr><td class="enum-value">t</td><td>The framework should attempt to place the popup such that the arrow somewhere along the top edge of the popup points at the center of the origin.</td></tr>
				<tr><td class="enum-value">r</td><td>The framework should attempt to place the popup such that the arrow somewhere along the right edge of the popup points at the center of the origin.</td></tr>
				<tr><td class="enum-value">b</td><td>The framework should attempt to place the popup such that the arrow somewhere along the bottom edge of the popup points at the center of the origin.</td></tr>
				<tr><td class="enum-value">l</td><td>The framework should attempt to place the popup such that the arrow somewhere along the left edge of the popup points at the center of the origin.</td></tr>
			</table>
		</p>
		<p>For each edge given in the list, the framework calculates
			<ol>
				<li>the distance between the tip of the arrow and the center of the origin, and</li>
				<li>whether minimizing the above distance would cause the arrow to appear too close to one of the corners of the popup along the given edge.</li>
			</ol>
		If the second condition applies, the edge is discarded as a possible solution for placing the arrow. Otherwise, the calculated distance is examined. If it is 0, meaning that the popup can be placed exactly such that the tip of the arrow points at the center of the origin, no further edges are examined, and the popup is positioned along the last examined edge. <strong>Thus, the order in which the edges are given matters.</strong></p>
		<p>The example below shows a popup with an arrow either along its left edge or along its top edge.</p>
<pre><code><![CDATA[
<div data-role="popup" data-arrow="l,t" class="ui-content">
	<h2>Popup with an arrow</h2>
	<p>A second paragraph.</p>
</div>
]]></code></pre>

		<iframe src="/resources/popup/example12.html" style="width:100%;height:390px;border:0px"></iframe>

		<h3><strong>Note:</strong> Chaining of popups not allowed</h3>
		<div class="warning">The framework does not currently support chaining of popups so it's not possible to embed a link from one popup to another popup. All links with a <code>data-rel="popup"</code> inside a popup will not do anything at all.</div>
		<p>This also means that custom select menus will not work inside popups, because they are themselves implemented using popups. If you place a select menu inside a popup, it will be rendered as a native select menu, even if you specify <code>data-native-menu="false"</code>.</p>
		<p>A workaround to get chained popups working is the use of a timeout for example in the <code>popupafterclose</code> event bound to the invoking popup. In the following example, when the first popup is closed, the second will be opened by a delayed call to the <code>open</code> method:</p>

<pre><code><![CDATA[
$( document ).on( "pageinit", function() {
    $( ".popupParent" ).on({
        popupafterclose: function() {
            setTimeout(function() { $( ".popupChild" ).popup( "open" ) }, 100 );
        }
    });
});
]]></code></pre>

		<xi:include href="../includes/pre-rendered-common.xml" xmlns:xi="http://www.w3.org/2003/XInclude"/>
		<p>The <placeholder name="name"/> widget moves the element on which it is instantiated such that it becomes the last child element of a page <code>div</code> or, if the element is not inside a page, it will become the last child element of the <code>body</code>. It then wraps the element in a container <code>div</code>, and prepends a newly created element that serves as the modal overlay screen to the parent of the container.</p>
		<p>The example below includes an entire jQuery Mobile page rather than just the popup. This helps illustrate where you must place the markup for the pre-rendered popup widget in relation to the jQuery Mobile page on which it is to appears. In the example, the popup has the attribute <code>data-overlay-theme="b"</code> to reflect the fact that the modal overlay screen has an associated theme.</p>

<pre><code><![CDATA[
<div data-role="page">
	<div data-role="header">
		<h1>Example Page</h1>
	</div>
	<div role="main" class="ui-content">
		<a href="#pre-rendered" data-rel="popup" class="ui-btn ui-corner-all ui-shadow ui-btn-inline">Open pre-rendered popup</a>
	</div>
	&lt;!-- the following two divs represent the pre-rendered popup widget --&gt;
	<div class="ui-popup-screen ui-overlay-b ui-screen-hidden"></div>
	<div class="ui-popup-container ui-popup-hidden ui-popup-truncate" id="pre-rendered-popup">
		<div class="ui-popup ui-body-inherit ui-overlay-shadow ui-corner-all" id="pre-rendered" data-role="popup" data-enhanced="true" data-overlay-theme="b">
			<p>Pre-rendered popup</p>
		</div>
	</div>
</div>
]]></code></pre>

		<iframe src="/resources/popup/example13.html" style="width:100%;height:390px;border:0px"></iframe>

	</longdesc>
	<added>1.2</added>
	<options>
		<option name="arrow" default='""' example-value='"l,t,r,b"'>
			<desc>Sets whether to draw the popup with an arrow.
				<p>This option is provided by the <code>widgets/popup.arrow</code> extension.</p>
				<p>This option is also exposed as a data attribute: <code>data-arrow="t,b"</code>.</p>
				<p>The following values are valid: <code>true</code>, <code>false</code>, or a string containing a comma-separated list of the letters "l", "t", "r", and "b". The list may be empty, in which case it corresponds to a value of <code>false</code>. The value <code>true</code> corresponds to the list <code>"l,t,r,b"</code>. This list indicates along which edges the code should attempt to place the arrow. The code tries to place the arrow along each edge given in the list in the left-to-right order given in the list until one such placement would result in the arrow pointing exactly at the desired coordinates. If no arrows can be displayed the popup is positioned as though the value of this option were <code>false</code>.</p>
			</desc>
			<type name="String">
				<desc>A comma-separated list of the letters "l", "t", "r", and "b".</desc>
			</type>
			<type name="Boolean">
				<desc>A value of <code>true</code> is equivalent to a value of "t,r,b,l", whereas <code>false</code> indicates that no arrow is to be shown.</desc>
			</type>
		</option>
		<option name="corners" default="true" example-value="false">
			<desc>
				<p>Sets whether to draw the popup with rounded corners.</p>
				<p>This option is also exposed as a data attribute: <code>data-corners="false"</code>.</p>
			</desc>
			<type name="Boolean" />
		</option>
		<xi:include href="../includes/widget-option-defaults.xml" xmlns:xi="http://www.w3.org/2003/XInclude"/>
		<xi:include href="../includes/widget-option-disabled.xml" xmlns:xi="http://www.w3.org/2003/XInclude"/>
		<option name="dismissible" default="true" example-value="false">
			<desc>
				<p>Sets whether clicking outside the popup or pressing Escape while the popup is open will close the popup.</p>
				<p><em>Note:</em> When history support is turned on, pressing the browser's "Back" button will dismiss the popup even if this option is set to false.</p>
				<p>This option is also exposed as a data attribute: <code>data-dismissible="false"</code>.</p>
			</desc>
			<type name="Boolean" />
		</option>
		<option name="history" default="true" example-value="false">
			<desc>
				<p>Sets whether to alter the url when a popup is open to support the back button.</p>
				<p>This option is also exposed as a data attribute: <code>data-history="false"</code>.</p>
			</desc>
			<type name="Boolean" />
		</option>
		<xi:include href="../includes/widget-option-initSelector.xml" xmlns:xi="http://www.w3.org/2003/XInclude"/>
		<option name="overlayTheme" default="null" example-value='"b"'>
			<desc>
				<p>Sets the color scheme (swatch) for the popup background, which covers the entire window. If not explicitly set, the background will be transparent.</p>
				<p>This option is also exposed as a data attribute: <code>data-overlay-theme="b"</code>.</p>
			</desc>
			<type name="String" />
		</option>
		<option name="positionTo" default='"origin"' example-value='"window"'>
			<desc>
				<p>Sets the element relative to which the popup will be centered. It has the following values:
				<table>
						<tr><td class="enum-value"><code>"origin"</code></td><td>
							When the popup opens, center over the coordinates passed to the <code>open()</code> call (see details on this <a href="#method-open">method</a>).
						</td></tr>
						<tr><td class="enum-value"><code>"window"</code></td><td>
							When the popup opens, center in the window.
						</td></tr>
						<tr><td class="enum-value">jQuery selector</td><td>
							When the popup opens, create a jQuery object based on the selector, and center over it. The selector is filtered for elements that are visible with <code>":visible"</code>. If the result is empty, the popup will be centered in the window.
						</td></tr>
					</table>
				</p>
				<p>This option is also exposed as a data attribute: <code>data-position-to="window"</code>.</p>
			</desc>
			<type name="String" />
		</option>
		<option name="shadow" default="true" example-value="false">
			<desc>
				<p>Sets whether to draw a shadow around the popup.</p>
				<p>This option is also exposed as a data attribute: <code>data-shadow="false"</code>.</p>
			</desc>
			<type name="Boolean" />
		</option>
		<option name="theme" default="null, inherited from parent" example-value='"b"'>
			<desc>Sets the color scheme (swatch) for the popup contents. Unless explicitly set to 'none', the theme for the popup will be assigned the first time the popup is shown by inheriting the page theme or, failing that, by the hard-coded value 'a'. If you set it to 'none', the popup will not have any theme at all, and will be transparent.
				<p>Possible values: swatch letter (a-z), or "none".</p>
				<p>This option is also exposed as a data attribute: <code>data-theme="b"</code>.</p>
			</desc>
			<type name="String" />
		</option>
		<option name="tolerance" default='"30,15,30,15"' example-value='"0,0"'>
			<desc>
				<p>Sets the minimum distance from the edge of the window for the corresponding edge of the popup. By default, the values above will be used for the distance from the top, right, bottom, and left edge of the window, respectively.</p>
				<p>You can specify a value for this option in one of four ways:
					<ol>
						<li>Empty string, null, or some other falsy value. This will cause the popup to revert to the above default values.</li>
						<li>A single number. This number will be used for all four edge tolerances.</li>
						<li>Two numbers separated by a comma. The first number will be used for tolerances from the top and bottom edge of the window, and the second number will be used for tolerances from the left and right edge of the window.</li>
						<li>Four comma-separated numbers. The first will be used for tolerance from the top edge, the second for tolerance from the right edge, the third for tolerance from the bottom edge, and the fourth for tolerance from the left edge.</li>
					</ol>
				</p>
			</desc>
			<type name="String" />
		</option>
		<option name="transition" default="none" example-value='"pop"'>
			<desc>
				<p>Sets the default transition for the popup. The default value will result in no transition.</p>
				<p>If the popup is opened from a link, and the link has the data-transition attribute set, the value specified therein will override the value of this option at the time the popup is opened from the link.</p>
			</desc>
			<type name="String" />
		</option>
	</options>
	<events>
		<event name="afterclose">
			<argument name="event" type="Event">
			</argument>
			<desc><p>Triggered when a popup has completely closed</p>
				<p>This event is triggered when the popup has completely disappeared from the screen, meaning that all associated animations have completed.</p>
			</desc>
		</event>
		<event name="afteropen">
			<argument name="event" type="Event">
			</argument>
			<desc><p>Triggered after a popup has completely opened</p>
				<p>This event is triggered when the popup has completely appeared on the screen, meaning that all associated animations have completed.</p>
			</desc>
		</event>
		<event name="beforeposition">
			<argument name="event" type="Event">
			</argument>
			<argument name="ui" type="Object">
			</argument>
			<desc><p>Triggered before a popup computes the coordinates where it will appear</p>
				<p>This event is triggered when the popup has completed preparations for appearing on the screen, when the document is resized and the popup needs to move to another location, or when the <code>reposition()</code> method is called. At this point the popup has not yet started the opening animations and it has not yet calculated the coordinates where it will appear on the screen. Handling this event gives an opportunity to modify the content of the popup before it appears on the screen. For example, the content can be scaled or parts of it can be hidden or removed if it is too wide or too tall. You can also modify the <code>options</code> parameter to affect the popup's placement. The properties inside the <code>options</code> object available for modification are the same as those used by the <code>reposition</code> method.</p>
			</desc>
		</event>
		<xi:include href="../includes/widget-event-create.xml" xmlns:xi="http://www.w3.org/2003/XInclude"/>
	</events>
	<methods>
		<method name="close">
			<desc>Closes the popup.
			</desc>
		</method>
		<xi:include href="../includes/widget-method-destroy.xml" xmlns:xi="http://www.w3.org/2003/XInclude"/>
		<xi:include href="../includes/widget-method-disable.xml" xmlns:xi="http://www.w3.org/2003/XInclude"/>
		<xi:include href="../includes/widget-method-enable.xml" xmlns:xi="http://www.w3.org/2003/XInclude"/>
		<method name="open" example-params="options">
			<desc>display the popup using the specified options.

				<p>If the <code>x</code> or <code>y</code> option is missing, and no jQuery selector is given as the value of the <code>positionTo</code> option, the middle of the window will be used.</p>
				<p>The <code>transition</code> option can be used to override the popup's own <code>transition</code> option. This will result in the popup opening via the transition specified in the call, but the popup's <code>transition</code> option will not be updated.</p>
				<p>Similarly, the <code>positionTo</code> option can be used to override the popup's default positioning without modifying the value of the popup's <code>positionTo</code> option. The values available for <code>positionTo</code> are the same as those for the popup's <a href="#option-positionTo"><code>positionTo</code> option</a>.</p>
			</desc>
				<argument name="options" type="Object">
					<property name="x" default=''>
						<desc>The x-coordinate where the popup is to be displayed.</desc>
						<type name="String"/>
					</property>
					<property name="y" default=''>
						<desc>The y-coordinate where the popup is to be displayed.</desc>
						<type name="String"/>
					</property>
					<property name="transition" default=''>
						<desc>The transition to use during the opening sequence.</desc>
						<type name="String"/>
					</property>
					<property name="positionTo" default=''>
						<desc>The positioning to use.</desc>
						<type name="String"/>
					</property>
				</argument>
		</method>
		<xi:include href="../includes/widget-method-option.xml" xmlns:xi="http://www.w3.org/2003/XInclude"/>
		<method name="reposition" example-params="options">
			<desc>Change the on-screen position of the popup. See the <code>open()</code> method for a description of the keys recognized from the <code>options</code> object.</desc>
				<argument name="options" type="Object">
					<property name="x" default=''>
						<desc>The x-coordinate where the popup is to be displayed.</desc>
						<type name="Integer"/>
					</property>
					<property name="y" default=''>
						<desc>The y-coordinate where the popup is to be displayed.</desc>
						<type name="Integer"/>
					</property>
					<property name="positionTo" default='"origin"'>
						<desc>The positioning to use.</desc>
						<type name="String"/>
					</property>
				</argument>
		</method>
	</methods>
	<example>
		<desc>A basic example of a Popup.</desc>
		<html><![CDATA[
<div data-role="page" id="page1">
	<div data-role="header">
		<h1>jQuery Mobile Example</h1>
	</div>
	<div role="main" class="ui-content">
		<a href="#popupBasic" data-rel="popup">Open Popup</a>
		<div data-role="popup" id="popupBasic">
			<p>This is a completely basic popup, no options set.</p>
		</div>
	</div>
</div>
]]></html>
	</example>
	<category slug="widgets"/>
</entry>
