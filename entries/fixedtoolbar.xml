<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="../entries2html.xsl" ?>
<entry name="fixedtoolbar" namespace="fn" type="widget" widgetnamespace="mobile" event-prefix="fixedtoolbar">
	<title>Fixedtoolbar Widget</title>
	<desc>Creates a fixedtoolbar</desc>
	<longdesc>
		<p>In browsers that support CSS <code>position: fixed</code> (most desktop browsers, iOS5+, Android 2.2+, BlackBerry 6, and others), toolbars that use the "fixedtoolbar" plugin will be fixed to the top or bottom of the viewport, while the page content scrolls freely in between. In browsers that don't support fixed positioning, the toolbars will remain positioned in flow, at the top or bottom of the page. </p>
		
		<p>To enable this behavior on a header or footer, add the <code>data-position="fixed"</code> attribute to a jQuery Mobile header or footer element.</p>
		
		<p>Fixed header markup example:</p>
		<pre><code>	
&lt;div data-role=&quot;header&quot; data-position=&quot;fixed&quot;&gt;
	&lt;h1&gt;Fixed Header&lt;/h1&gt;
&lt;/div&gt;
		</code></pre>
		
		<p>Fixed footer markup example:</p>
		<pre><code>	
&lt;div data-role=&quot;footer&quot; data-position=&quot;fixed&quot;&gt;
	&lt;h1&gt;Fixed Footer&lt;/h1&gt;
&lt;/div&gt;
		</code></pre>
		
		<iframe src="/resources/fixedtoolbar/example1.html" style="width:100%;height:420px;border:0px"></iframe>
		
		<h3>Fullscreen Toolbars</h3>
		
		<p>Fullscreen fixed toolbars sit on top of the content at all times when they are visible, and unlike regular fixed toolbars, fullscreen toolbars do not fall back to static positioning when toggled. Instead they disappear from the screen entirely. Fullscreen toolbars are ideal for more immersive interfaces, like a photo viewer that is meant to fill the entire screen with the photo itself and no distractions.</p>
		
				<p>To enable this option on a fixed header or footer, add the <code>data-fullscreen</code> attribute to the element.</p>
		
				<pre><code>	
&lt;div data-role=&quot;header&quot; data-position=&quot;fixed&quot; data-fullscreen=&quot;true&quot;&gt;
	&lt;h1&gt;Fixed Header!&lt;/h1&gt;
&lt;/div&gt;
				</code></pre>
		<iframe src="/resources/fixedtoolbar/example2.html" style="width:100%;height:420px;border:0px"></iframe>

		<h3>Forms in toolbars</h3>
		
		<p>While all form elements are now tested to work correctly within <em>static</em> toolbars as of jQuery Mobile 1.1, we recommend extensive testing when using form elements within <em>fixed</em> toolbars or within any <code>position: fixed</code> elements. This can potentially trigger a number of unpredictable issues in various mobile browsers, Android 2.2/2.3 in particular (detailed in <b>Known issues in Android 2.2/2.3</b>, below).</p>
		
		<h3>Changes in jQuery Mobile 1.1</h3>
		
		<p>Prior to version 1.1, jQuery Mobile used dynamically re-positioned toolbars for the fixed header effect because very few mobile browsers supported the <code>position:fixed</code> CSS property, and simulating fixed support through the use of "fake" JavaScript overflow-scrolling behavior would have reduced our browser support reach, in addition to feeling unnatural on certain platforms. This behavior was not ideal, and jQuery Mobile 1.1 took a new approach to fixed toolbars that allows much broader support. The framework now offers true fixed toolbars on many popular platforms, while gracefully degrading non-supporting platforms to static positioning.</p>
		
		<h3>Polyfilling older platforms</h3>
		<p>The fixed toolbar plugin degrades gracefully in platforms that do not support CSS <code>position:fixed</code> properly, such as iOS4.3. If you still need to support fixed toolbars on that platform (with the show/hide behavior) included in previous releases, Filament Group has developed a polyfill that you can use.</p>
		
		<ul>
				<li><a href="https://github.com/filamentgroup/jQuery-Mobile-FixedToolbar-Legacy-Polyfill">Github code repository with CSS, and JavaScript required for the fixed toolbars polyfill</a></li>
				<li><a href="http://filamentgroup.github.com/jQuery-Mobile-FixedToolbar-Legacy-Polyfill/">Preview URL using the code in the repo above</a></li>
		</ul>
		
		<p>Just include the CSS and JS files after your references to jQuery Mobile and Fixed toolbars will work similarly to jQuery Mobile 1.0 in iOS4.3, with the inclusion of the new API for the 1.1 fixedtoolbar plugin.</p>
		
		<p>If you have any improvements to suggest, fork the <a href="https://github.com/filamentgroup/jQuery-Mobile-FixedToolbar-Legacy-Polyfill">gist</a> on github and let us know!</p>
		
		<h3>Known issue with form controls inside fixed toolbars, and programmatic scroll</h3>	
		<p>An obscure issue exists in iOS5 and some Android platforms where form controls placed inside fixed-positioned containers can lose their hit area when the window is programatically scrolled (using <code>window.scrollTo</code> for example). This is not an issue specific to jQuery Mobile, but because of it, we recommend not programatically scrolling a document when using form controls inside jQuery Mobile fixed toolbars. <a href="https://github.com/scottjehl/Device-Bugs/issues/1">This ticket</a> from the <a href="https://github.com/scottjehl/Device-Bugs/">Device Bugs project</a> tracker explains this problem in more detail.</p>
		
		
		<h3>Known issues in Android 2.2/2.3</h3>	
		<p>Android 2.2/2.3's implementation of <code>position: fixed;</code> can, in conjunction with seemingly unrelated styles and markup patterns, cause a number of strange issues, particularly in the case of <code>position: absolute</code> elements inside of <code>position: fixed</code> elements. While we've done our best to work around a number of these unique bugs within the scope of the library, custom styles may cause a number of issues.</p>
		<ul>
			<li>Form elements elsewhere on the page—select menus in particular—can fail to respond to user interaction when an <em>empty</em> absolute positioned element is placed within a fixed position element. In rare cases—and specific to Android 2.2—this can cause <em>entire pages</em> to fail to respond to user interaction. This can seemingly be solved by adding any character to the absolute positioned element, including a non-breaking space, and in some cases even whitespace.</li>
			<li>The above-described issue can also be triggered by an absolute positioned image inside of a fixed position element, but <em>only</em> when that image is using something <em>other than its inherent dimensions</em>. If a height or width is specified on the image using CSS, or the image src is invalid (thus having no inherent height and width), this issue can occur. If an image that is inherently, say, 50x50 pixels is placed in a fixed element and left at its inherent dimensions, this issue does not seem to occur.</li>
			<li>When a <code>position: fixed</code> element appears anywhere on a page, most 2D CSS transforms will fail. Oddly, only <code>translate</code> transforms seem unaffected by this. Even more oddly, this issue is solved by setting a CSS <code>opacity</code> of .9 or below on the parent of the fixed element.</li>
			<li>Combinations of <code>position: fixed</code> and overflow properties are best avoided, as both have been known to cause unpredictable issues in older versions of Android OS.</li>
			<li>Any element that triggers the on-screen keyboard, when placed inside a <code>position: fixed</code> element, will fail to respond to user input when using anything other than the default keyboard. This includes Swype, XT9 or, it seems, any input method apart from the standard non-predictive keyboard.</li>
		</ul>
			
		<p>While we will continue to try to find ways to mitigate these bugs as best we can, we currently advise against implementing fixed toolbars containing complicated user styles and form elements without extensive testing in all versions of Android's native browser.</p>
		
		
<div class="ui-body ui-body-e">		
		<h2>No longer supported: touchOverflowEnabled</h2>
		
		<p>Prior to jQuery Mobile 1.1, true fixed toolbar support was contingent on native browser support for the CSS property <code>overflow-scrolling: touch</code>, which is currently only supported in iOS5. As of version 1.1, jQuery Mobile no longer uses this CSS property at all. We've removed all internal usage of this property in the framework, but we've left it defined globally on the $.mobile object to reduce the risk that its removal will cause trouble with existing applications. This property is flagged for removal, so please update your code to no longer use it. The support test for this property, however, remains defined under <code>$.support</code> and we have no plans to remove that test at this time. </p>
</div>
	
  	</longdesc>
	<added>1.0</added>
	<options>
		<option name="visibleOnPageShow" default="true" example-value="false">
			<desc>This determines whether the toolbar is visible or not when its parent page is shown. 
				<p>This option is also exposed as a data attribute: <code>data-visible-on-page-show="false"</code>.</p>
			</desc>
			<type name="Boolean" />
		</option>
		<option name="disablePageZoom" default="true" example-value="false">
			<desc>This determines whether user-scaling should be disabled on pages that contain fixed toolbars. 
				<p>This option is also exposed as a data attribute: <code>data-disable-page-zoom="false"</code>.</p>
			</desc>
			<type name="Boolean" />
		</option>
		<option name="transition" default="slide (which ends up using slideup and slidedown)" example-value="fade">
			<desc>The transition that should be used for showing and hiding a fixed toolbar. Possible values are "none", "fade", and "slide" (or you can write a CSS transition of your own and use that too).
				<p>This option is also exposed as a data attribute: <code>data-transition="fade"</code>.</p>
			</desc>
			<type name="String" />
		</option>
		<option name="fullscreen" default="false" example-value="true">
			<desc>Fullscreen fixed toolbars sit on top of the content at all times when they are visible, and unlike regular fixed toolbars, fullscreen toolbars do not fall back to static positioning when toggled, instead they disappear from the screen entirely. Fullscreen toolbars are ideal for more immersive interfaces, like a photo viewer that is meant to fill the entire screen with the photo itself and no distractions.
				<p>This option is also exposed as a data attribute: <code>data-fullscreen="true"</code>.</p>
				<div style="padding: 0.4em 15px; background: #FFF3A5; "><b>Note:</b> While the data attribute syntax for this option has not changed, it is now only supported on the toolbar element itself, and not the page element. </div>
			</desc>
			<type name="Boolean" />
		</option>
		<option name="tapToggle" default="true" example-value="false">
			<desc>Enable or disable the user's ability to toggle toolbar visibility with a tap on the screen (or a click, for mouse users).
				<p>This option is also exposed as a data attribute: <code>data-tap-toggle="false"</code>.</p>
				<div style="padding: 0.4em 15px; background: #FFF3A5; "><b>Note:</b> This behavior was formerly configurable as follows, but as of version 1.1 this syntax is no longer supported: <br /><code>$.mobile.fixedToolbars.setTouchToggleEnabled(false);</code></div>
			</desc>
			<type name="Boolean" />
		</option>
		<option name="tapToggleBlacklist" default='"a, button, input, select, textarea, .ui-header-fixed, .ui-footer-fixed"' example-value='"a, button, input, select, textarea, .ui-header-fixed, .ui-footer-fixed"'>
			<desc>A list of jQuery selectors that, when tapped, will not cause the toolbars to be toggled.
			</desc>
			<type name="String" />
		</option>
		<option name="hideDuringFocus" default='"input, select, textarea"' example-value='"input, select, textarea"'>
			<desc>A list of jQuery selectors that should cause the toolbars to hide while focused, except if they are in a fixed toolbar.
			</desc>
			<type name="String" />
		</option>
		<option name="updatePagePadding" default="true" example-value="false">
			<desc>Since toolbars can vary in height depending on the content they contain, this option automatically updates the padding on the page element to ensure that fixed toolbars have adequate space in the document when they are statically positioned, and when scrolled to the top or bottom of the page. When enabled, the padding updates during many operations, such as pageshow, during page transitions, and on resize and orientationchange. As an optimization, we would recommend that you consider disabling this option and adding a rule to your CSS to set the padding of the page div to match the EM height of your toolbars, such as <code>.ui-page-header-fixed { padding-top: 4.5em; }</code>. 
				<p>This option is also exposed as a data attribute: <code>data-update-page-padding="false"</code>.</p>
			</desc>
			<type name="Boolean" />
		</option>
		<option name="supportBlacklist" default="function that returns a boolean value" example-value='"arrow-d"'>
			<desc>CSS <code>position: fixed</code> support is very difficult to test; in fact, at the time of version 1.1 release, there was no known way to reasonably test for fixed support without turning up false positives or negatives in certain popular browsers. This option is a function that attempts to opt-out some popular platforms that are known to be troublesome with <code>position: fixed</code> . Often, these platforms support <code>position: fixed</code> partially, which can be worse than not supporting it at all. If overriding this option with your own blacklist logic, you simply need to provide a function that returns a true or false result when called upon initialization. You must set it on mobileinit, so that it applies when the plugin is initially created. 
				<pre><code>
$( document ).on("mobileinit", function(){
  $.mobile.fixedtoolbar.prototype.options.supportBlacklist = function(){
    var result;
    // logic to determine whether result should be true or false
    return result;
  };
})				
				</code></pre>
			</desc>
			<type name="Function" />
		</option>
		<option name="initSelector"  default='":jqmData(position=&#39;fixed&#39;)"'>
			<desc>This is used to define the selectors (element types, data roles, etc.) that will automatically be initialized as collapsibles. To change which elements are initialized, bind this option to the mobileinit event:
<pre><code>
$( document ).on( "mobileinit", function(){
	$.mobile.fixedtoolbar.prototype.options.initSelector = ".myselector";
});
</code></pre>
			</desc>
			<type name="CSS selector string" />
		</option>
	</options>
	<events>
		<event name="create">	
			<desc>Triggered when a fixed toolbar is created
			</desc>
			<argument name="event" type="Event">
				<desc></desc>
			</argument>
			<argument name="ui" type="Object">
				<desc></desc>
			</argument>
		</event>
	</events>
	<methods>
		<method name="show">
			<desc>show the toolbar
				<p><div style="padding: 0.4em 15px; background: #FFF3A5; "><b>Note:</b> Prior to version 1.1, the following syntax was used to show the toolbars, but it is no longer supported:<br />
<code>$.mobile.fixedToolbars.show(true);</code></div></p>
			</desc>
		</method>
		<method name="hide">
			<desc>hide the toolbar (if it's not a fullscreen toolbar, it'll toggle back to static positioning, which may or may not be hidden from view depending on scroll)
			</desc>
		</method>
		<method name="toggle">
			<desc>calls either the show or the hide method, depending on whether the toolbar is visible.
			</desc>
		</method>
		<method name="updatePagePadding">
			<desc> update the padding (either top or bottom, depending on if the toolbar is a header or a footer) of the page element parent of the toolbar to match the height of the toolbar.
				<p>There is also an <code>updatelayout</code> event that can be used to trigger the toolbars to re-position. Developers who are building dynamic applications that inject content into the current page can also manually trigger this <code>updatelayout</code> event to ensure components on the page update in response to the new content that was just added. This event is used internally in the collapsible and listview filter plugins and is powerful because it's not toolbar-specific -- any widget can be built to listen for the updatelayout event to update the widget in response.</p>
			</desc>
		</method>
		<method name="destroy">
			<desc> destroy at fixedtoolbar (restore the element to its initial state)
			</desc>
		</method>
	</methods>
	<example>
		<desc>A basic example of a page with fixed toolbars.</desc>
		<html><![CDATA[<div data-role="header" <div data-role="header" data-position="fixed" data-theme="a">
		<h1>Fixed Header</h1>
	</div>
	<div data-role="content" > 
	
		<p>This page demonstrates the "fixed" toolbar mode. </p>
		<br /><br />
		<p>To enable this toolbar feature type, you apply the <code>data-position="fixed"</code> attribute to both the header and footer <code>div</code> elements.</p>
		<br /><br />
		<p>And we're adding more text here so that you can really see the fixed toobars in action.</p>
		<br /><br />
		<p>If you tap the screen while in the middle of the page (i.e. neither at the top nor the bottom of the page, the visibility of the toolbars will toggle</p>
		<p></p>
					      
	</div>
    <div data-role="footer" data-theme="a" data-position="fixed">
		<h1>Fixed Footer</h1>
	</div>]]></html>
	</example>
	<category slug="widgets"/>
</entry>
