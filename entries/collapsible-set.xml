<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="../entries2html.xsl" ?>
<entry name="collapsibleset" namespace="fn" type="widget" widgetnamespace="mobile" event-prefix="collapsibleset">
	<title>Collapsible set Widget</title>
	<desc>Creates a collapsible set of collapsible blocks of content</desc>
	<longdesc>
		<p>Collapsible sets start with the exact same markup as individual collapsibles.
		By adding a parent wrapper with a <code>data-role="collapsible-set"</code> attribute around a number of collapsibles, the framework will style these to looks like a visually grouped widget and make it behave like an accordion so only one section can be open at a time.</p>
		<p>By default, all the sections will be collapsed. To set a section to be open when the page loads, add the <code>data-collapsed="false"</code> attribute to the heading of the section you want expanded.</p>

<pre><code>
&lt;div data-role="collapsible-set"&gt;

	&lt;div data-role=&quot;collapsible&quot; <strong>data-collapsed=&quot;false&quot;</strong>&gt;
		&lt;h3&gt;Section 1&lt;/h3&gt;
		&lt;p&gt;I&#x27;m the collapsible set content for section 1.&lt;/p&gt;
	&lt;/div&gt;

	&lt;div data-role=&quot;collapsible&quot;&gt;
		&lt;h3&gt;Section 2&lt;/h3&gt;
		&lt;p&gt;I&#x27;m the collapsible set content for section 2.&lt;/p&gt;
	&lt;/div&gt;

&lt;/div&gt;
</code></pre>	
	

		<p>Here is an example of a collapsible set with 5 sections.
		<iframe src="/resources/collapsible-set/example1.html" style="width:100%;height:310px;border:0px"></iframe></p>
		
		<h3>Non-inset collapsible sets</h3>

		<p>For full width collapsibles without corner styling add the <code>data-inset="false"</code> attribute to the set.
		<iframe src="/resources/collapsible-set/example2.html" style="width:100%;height:240px;border:0px"></iframe></p>
		
		<h3>Mini collapsible sets</h3>

		<p>For a more compact version that is useful in tight spaces, add the <code>data-mini="true"</code> attribute to the set to create a <a href="../forms/forms-all-mini.html">mini version</a>. 
		<iframe src="/resources/collapsible-set/example3.html" style="width:100%;height:210px;border:0px"></iframe></p>
		
		<h3>Custom icons</h3>
		
		<p>Collapsible headings’ default icons can be overridden by using the <code>data-collapsed-icon</code> and <code>data-expanded-icon</code> attributes, either at the <code>collapsible-set</code> level or on an individual collapsible basis.
		<iframe src="/resources/collapsible-set/example4.html" style="width:100%;height:240px;border:0px"></iframe></p>

		<h3>Icon positioning</h3>
		
		<p>Collapsible headings’ default icon positioning can be overridden by using the <code>data-iconpos</code> attribute, either at the <code>collapsible-set</code> level or on an individual collapsible basis.
		<iframe src="/resources/collapsible-set/example5.html" style="width:100%;height:310px;border:0px"></iframe></p>
		
		<h3>Theming collapsible content</h3>
		
		<p>The standard <code>data-theme</code> attribute can be used to set the color of each collapsible in a set. To provide a clearer visual grouping of the content with the headers, add the <code>data-content-theme</code> attribute with a swatch letter. This adds a themed background color and border to the content block. For consistent theming, add these attributes to the parent collapsible set.
		
<pre><code>&lt;div data-role=&quot;collapsible-set&quot; data-theme=&quot;c&quot; data-content-theme=&quot;d&quot;&gt;
</code></pre>	

		<iframe src="/resources/collapsible-set/example6.html" style="width:100%;height:240px;border:0px"></iframe></p>

		<h3>Theming individual sections</h3>
		
		<p>To have individual sections in a group styled differently, add <code>data-theme</code> and <code>data-content-theme</code> attributes to specific collapsibles.
		<iframe src="/resources/collapsible-set/example7.html" style="width:100%;height:240px;border:0px"></iframe></p>

		<h3>Expanding or collapsing items in a set</h3>
		
		<p>To expand or collapse items in a set, call the respective methods on individual collapsibles. The selector for the collapse method can include multiple items in a set:
</p>
<pre><code>
$( "#myCollapsibleSet" ).children().trigger( "collapse" );
</code></pre>
		
	</longdesc>
	<added>1.0</added>
	<options>
		<option name="collapsedIcon" default='"plus"' example-value='"arrow-r"'>
			<desc>Sets the icon for the headers of the collapsible containers when in a collapsed state. 
				<p>This option is also exposed as a data attribute: <code>data-collapsed-icon="arrow-r"</code>.</p>
			</desc>
			<type name="String" />
		</option>
		<option name="expandedIcon" default='"minus"' example-value='"arrow-d"'>
			<desc>Sets the icon for the header of the collapsible container when in an expanded state. 
				<p>This option is also exposed as a data attribute: <code>data-expanded-icon="arrow-d"</code>.</p>
			</desc>
			<type name="String" />
		</option>
		<option name="iconpos" default='"left"' example-value="right">
			<desc>Positions the icon in the collapsible headers. 
				<p>Possible values: left, right, top, bottom, none, notext.</p>
				<p>This option is also exposed as a data attribute: <code>data-iconpos="right"</code>.</p>
			</desc>
	    	<type name="String" />
		</option>
	    <option name="initSelector"  default='":jqmData(role=&#39;collapsible-set&#39;)"'>
			<desc>This is used to define the selectors (element types, data roles, etc.) that will automatically be initialized as collapsibles. To change which elements are initialized, bind this option to the mobileinit event:
<pre><code>
$( document ).bind( "mobileinit", function(){
    $.mobile.collapsibleset.prototype.options.initSelector = ".mycollapsibleset";
});
</code></pre>
			</desc>
			<type name="CSS selector string" />
		</option>
		<option name="inset"  default="true" example-value="false">
			<desc>By setting this option to false the collapsibles will get a full width appearance without corners. If the value is false for an individual collapsible container, but that container is part of a collapsible set, then the value is inherited from the parent collapsible set. 
				<p>This option is also exposed as a data attribute: <code>data-mini="true"</code>.</p>
			</desc>
			<type name="Boolean" />
		</option>
		<option name="mini"  default="false" example-value="true">
			<desc>Sets the size of the element to a more compact, mini version. If the value is false for an individual collapsible container, but that container is part of a collapsible set, then the value is inherited from the parent collapsible set.
				<p>This option is also exposed as a data attribute: <code>data-inset="false"</code>.</p>
			</desc>
			<type name="Boolean" />
		</option>
		<option name="theme" default="null, inherited from parent" example-value='"a"'>
			<desc>Sets the color scheme (swatch) for the collapsible set. It accepts a single letter from a-z that maps to the swatches included in your theme. 
				<p>Possible values: swatch letter (a-z).</p>
				<p>This option is also exposed as a data attribute: <code>data-theme="a"</code>.</p>
			</desc>
			<type name="String" />
		</option>
	</options>
	<events>
		<event name="create">
			<desc>Triggered when a collapsible set is created</desc>
		</event>
	</events>
	<methods>
		
		<method name="refresh">
			<desc>Updates the collapsible set.
				<p>If you manipulate a collapsible set via JavaScript (e.g. add new collapsible containers), you must call the refresh method on it to update the visual styling.</p>
			
			</desc>
		</method>
	</methods>
	<example>
		<desc>A basic example of a collapsible set.</desc>
		<html><![CDATA[<div data-role="header">
		<h1>jQuery Mobile Example</h1>
	</div>
	<div data-role="content">
		<div data-role="collapsible-set">
			<div data-role="collapsible" data-collapsed="false">
				<h3>Section A</h3>
				<p>I'm the collapsible set content for section A.</p>
			</div>
			<div data-role="collapsible">
				<h3>Section B</h3>
				<p>I'm the collapsible set content for section B.</p>
			</div>
		</div>
	</div>]]></html>
	</example>
	<category slug="widgets"/>
</entry>
