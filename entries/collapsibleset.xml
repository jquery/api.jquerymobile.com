<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="../entries2html.xsl" ?>
<entry name="collapsibleset" namespace="fn" type="widget" widgetnamespace="mobile" event-prefix="collapsibleset" init-selector=":jqmData(role=&#39;collapsibleset&#39;)">
	<title>Collapsibleset Widget</title>
	<desc>Creates a set of collapsible blocks of content</desc>
	<longdesc>
		<h2>Sets of collapsibles</h2>
		<p>jQuery Mobile will visually style a set of <a href="/collapsible/">collapsibles</a> as a group and will make the set behave like an accordion in that only one collapsible can be open at a time if you wrap the collapsibles in a <code>div</code> that has the attribute <code>data-role="collapsibleset"</code>.</p>

		<p>By default, all the collapsible sections will be collapsed. To set a section to be open when the page loads, add the <code>data-collapsed="false"</code> attribute to the heading of the section you want expanded.</p>

<pre><code><![CDATA[
<div data-role="collapsible-set">

	<div data-role="collapsible" data-collapsed="false">
		<h3>Section 1</h3>
		<p>I'm the collapsibleset content for section 1. My content is initially visible.</p>
	</div>

	<div data-role="collapsible">
		<h3>Section 2</h3>
		<p>I'm the collapsibleset content for section 2.</p>
	</div>

</div>
]]></code></pre>

		<p>Here is an example of a <placeholder name="name"/> widget with 5 sections.
		<iframe src="/resources/collapsibleset/example1.html" style="width:100%;height:360px;border:0px"></iframe></p>

		<h3>Non-inset <placeholder name="name"/> widgets</h3>

		<p>For full width collapsibles without corner styling add the <code>data-inset="false"</code> attribute to the set.
		<iframe src="/resources/collapsibleset/example2.html" style="width:100%;height:240px;border:0px"></iframe></p>

		<h3>Mini <placeholder name="name"/> widgets</h3>

		<p>For a more compact version that is useful in tight spaces, add the <code>data-mini="true"</code> attribute to the set to create a mini version.
		<iframe src="/resources/collapsibleset/example3.html" style="width:100%;height:210px;border:0px"></iframe></p>

		<h3>Custom icons</h3>

		<p>The icon displayed when a collapsible is shown or hidden can be overridden by using the <code>data-collapsed-icon</code> and <code>data-expanded-icon</code> attributes. Both the <code>collapsibleset</code> widget and the <code>collapsible</code> widget accepts these attributes. When you set one or both of these attributes on the <code>collapsibleset</code> widget all <code>collapsible</code> widgets that are part of the <code>collapsibleset</code> display the icon specified by the chosen value. You can override the icon displayed by individual <code>collapsible</code> widgets by setting one or both of these attributes on the <code>collapsible</code> widget itself.
		<iframe src="/resources/collapsibleset/example4.html" style="width:100%;height:240px;border:0px"></iframe></p>

		<h3>Icon positioning</h3>

		<p>The default icon positioning for collapsible headings can be overridden by using the <code>data-iconpos</code> attribute. You can set the attribute either on the <code>collapsibleset</code> to affect all collapsibles in the set, or on an individual <code>collapsible</code> widget to affect only the one widget.
		<iframe src="/resources/collapsibleset/example5.html" style="width:100%;height:310px;border:0px"></iframe></p>

		<h3>Theming collapsible content</h3>

		<p>The standard <code>data-theme</code> attribute can be used to set the color of each collapsible in a set. To provide a clearer visual grouping of the content with the headers, add the <code>data-content-theme</code> attribute with a swatch letter. This adds a themed background color and border to the content block. For consistent theming, add these attributes to the parent <placeholder name="name"/> widget.

<pre><code><![CDATA[
<div data-role="collapsible-set" data-theme="b" data-content-theme="a">
]]></code></pre>

		<iframe src="/resources/collapsibleset/example6.html" style="width:100%;height:240px;border:0px"></iframe></p>

		<h3>Theming individual sections</h3>

		<p>To have individual sections in a group styled differently, add <code>data-theme</code> and <code>data-content-theme</code> attributes to specific collapsibles.
		<iframe src="/resources/collapsibleset/example7.html" style="width:100%;height:240px;border:0px"></iframe></p>

		<xi:include href="../includes/pre-rendered-common.xml" xmlns:xi="http://www.w3.org/2003/XInclude"/>
		<p>The <placeholder name="name"/> widget does not require that the collapsibles it contains also be pre-rendered.</p>
		<p>In the example below, pre-rendered markup for a <placeholder name="name"/> is provided. The attribute <code>data-corners="false"</code> is explicitly specified, since the absence of the <code>ui-corner-all</code> class on the container element indicates that the "corners" widget option is to be false. One of the child collapsibles is provided as-is, while the other is pre-rendered.</p>

<pre><code><![CDATA[
<div data-role="collapsibleset" class="ui-collapsible-set" data-corners="false">
	<div data-role="collapsible">
		<h2>Child collapsible</h2>
		<p>This is the collapsible content.</p>
	</div>
	<div data-role="collapsible" data-enhanced="true" class="ui-collapsible ui-collapsible-inset ui-corner-all" data-collapsed="false" data-corners="true">
		<h2 class="ui-collapsible-heading">
			<a href="#" class="ui-collapsible-heading-toggle ui-btn ui-btn-icon-left ui-icon-minus">
				Pre-rendered child collapsible
				<span class="ui-collapsible-heading-status">click to collapse contents</span>
			</a>
		</h2>
		<div class="ui-collapsible-content" aria-hidden="false">
			<p>This is the collapsible content.</p>
		</div>
	</div>
</div>
]]></code></pre>

	<iframe src="/resources/collapsibleset/example8.html" style="width:100%;height:240px;border:0px"></iframe>

	</longdesc>
	<added>1.0</added>
	<options>
		<option name="collapsedIcon" default='"plus"' example-value='"arrow-r"'>
			<desc>Sets the icon for the headers of the collapsible containers when in a collapsed state.
				<p>This option is also exposed as a data attribute: <code>data-collapsed-icon="arrow-r"</code>.</p>
			</desc>
			<type name="String" />
		</option>
		<option name="corners" default="true" example-value="false">
			<desc>Applies the theme border-radius to the first and last collapsible if set to true.
				<p>This option is also exposed as a data attribute:<code>data-corners="false"</code>.</p>
			</desc>
			<type name="Boolean" />
		</option>
		<xi:include href="../includes/widget-option-defaults.xml" xmlns:xi="http://www.w3.org/2003/XInclude"/>
		<xi:include href="../includes/widget-option-disabled.xml" xmlns:xi="http://www.w3.org/2003/XInclude"/>
		<xi:include href="../includes/widget-option-enhanced.xml" xmlns:xi="http://www.w3.org/2003/XInclude"/>
		<option name="expandedIcon" default='"minus"' example-value='"arrow-d"'>
			<desc>Sets the icon for the header of the collapsible container when in an expanded state.
				<p>This option is also exposed as a data attribute: <code>data-expanded-icon="arrow-d"</code>.</p>
			</desc>
			<type name="String" />
		</option>
		<option name="iconpos" default='"left"' example-value="right">
			<desc>Positions the icon in the collapsible headers.
				<p>Possible values: left, right, top, bottom, none, notext.</p>
				<p>This option is also exposed as a data attribute: <code>data-iconpos="right"</code>.</p>
			</desc>
			<type name="String" />
		</option>
		<option name="initSelector" default="null" deprecated="1.4.0">
			<desc>
				<p>The default <code>initSelector</code> for the <placeholder name="name" /> widget is:</p>
		<pre><code>
		"<placeholder name="init-selector"/>"
		</code></pre>
				<p><strong>This option is deprecated in 1.4.0 and will be removed in 1.5.0.</strong></p>
				<p><strong>The old value of the <placeholder name="name" /> widget's <code>initSelector</code> option (<code>":jqmData(role='collapsible-set')"</code>) is deprecated.</strong> As of jQuery Mobile 1.5.0, only widgets that have the attribute <code>data-role="collapsibleset"</code> will be enhanced as <placeholder name="name"/> widgets.</p>
				<p>As of jQuery Mobile 1.4.0, the <code>initSelector</code> is no longer a widget option. Instead, it is declared directly on the widget prototype. Thus, you may specify a custom value by handling the <code>mobileinit</code> event and overwriting the <code>initSelector</code> on the prototype:</p>
		<pre><code>
		$( document ).on( "mobileinit", function() {
			$.mobile.<placeholder name="name"/>.prototype.initSelector = "div.custom";
		});
		</code></pre>
				<p><strong>Note:</strong> Remember to attach the <code>mobileinit</code> handler after you have loaded jQuery, but before you load jQuery Mobile, because the event is triggered as part of jQuery Mobile's loading process.</p>
				<p>The value of this option is a jQuery selector string. The framework selects elements based on the value of this option and instantiates <placeholder name="name" /> widgets on each of the resulting list of elements.</p>
			</desc>
			<type name="String" />
		</option>
		<option name="inset" default="true" example-value="false">
			<desc>By setting this option to false the collapsibles will get a full width appearance without corners. If the value is false for an individual collapsible container, but that container is part of a <placeholder name="name"/> widget, then the value is inherited from the parent <placeholder name="name"/> widget.
				<p>This option is also exposed as a data attribute: <code>data-inset="true"</code>.</p>
			</desc>
			<type name="Boolean" />
		</option>
		<option name="mini" default="false" example-value="true">
			<desc>Sets the size of the element to a more compact, mini version. If the value is false for an individual collapsible container, but that container is part of a <placeholder name="name"/> widget, then the value is inherited from the parent <placeholder name="name"/> widget.
				<p>This option is also exposed as a data attribute: <code>data-mini="false"</code>.</p>
			</desc>
			<type name="Boolean" />
		</option>
		<xi:include href="../includes/widget-option-initSelector.xml" xmlns:xi="http://www.w3.org/2003/XInclude"/>
	</options>
	<events>
		<xi:include href="../includes/widget-event-create.xml" xmlns:xi="http://www.w3.org/2003/XInclude"/>
	</events>
	<methods>
		<xi:include href="../includes/widget-method-destroy.xml" xmlns:xi="http://www.w3.org/2003/XInclude"/>
		<xi:include href="../includes/widget-method-disable.xml" xmlns:xi="http://www.w3.org/2003/XInclude"/>
		<xi:include href="../includes/widget-method-enable.xml" xmlns:xi="http://www.w3.org/2003/XInclude"/>
		<xi:include href="../includes/widget-method-option.xml" xmlns:xi="http://www.w3.org/2003/XInclude"/>
		<method name="refresh">
			<desc>Updates the <placeholder name="name"/> widget.
				<p>If you manipulate a <placeholder name="name"/> widget via JavaScript (e.g. by adding new collapsibles, removing old ones, or showing/hiding existing ones), you must call the refresh method on it to update the visual styling. This method will instantiate collapsibles on child elements which are marked <code>data-role="collapsible"</code>, so there is no need to manually call <code>.collapsible()</code>.</p>

			</desc>
		</method>
	</methods>
	<example>
		<desc>A basic example of a <placeholder name="name"/> widget.</desc>
		<html><![CDATA[
<div data-role="page" id="page1">
	<div data-role="header">
		<h1>jQuery Mobile Example</h1>
	</div>
	<div role="main" class="ui-content">
		<div data-role="collapsibleset">
			<div data-role="collapsible" data-collapsed="false">
				<h3>Section A</h3>
				<p>I'm the collapsibleset content for section A.</p>
			</div>
			<div data-role="collapsible">
				<h3>Section B</h3>
				<p>I'm the collapsibleset content for section B.</p>
			</div>
		</div>
	</div>
</div>
]]></html>
	</example>
	<category slug="widgets"/>
</entry>
