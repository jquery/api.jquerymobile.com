<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="../entries2html.xsl" ?>
<entry name="textinput" namespace="fn" type="widget" widgetnamespace="mobile">
	<title>Textinput Widget</title>
    <desc>Creates a textinput widget for textinput, textarea or search input</desc>
    <longdesc>
		<h2>Text Input</h2>
		
		<p>Text inputs and textareas are coded with standard HTML elements, then enhanced by jQuery Mobile to make them more attractive and useable on a mobile device. View the <a href="../../api/data-attributes.html">data- attribute reference</a> to see all the possible attributes you can add to text inputs.</p>
			
		<p>To collect standard alphanumeric text, use an <code>input</code> with a <code>type="text"</code> attribute. Set the <code>for</code> attribute of the <code>label</code> to match the <code>id</code> of the <code>input</code> so they are semantically associated. It's possible to <a href="../docs-forms.html">accessibly hide the label</a> if it's not desired in the page layout, but we require that it is present in the markup for semantic and accessibility reasons.</p>


<pre><code>
&lt;label for=&quot;basic&quot;&gt;Text Input:&lt;/label&gt;
&lt;input type=&quot;text&quot; name=&quot;name&quot; id=&quot;basic&quot; value=&quot;&quot; /&gt;
</code></pre>
		<p>This will produce a basic text input. The default styles set the width of the input to 100% of the parent container and stack the label on a separate line.
		<iframe src="/resources/textinput/example1.html" style="width:100%;height:90px;border:0px"></iframe></p>
        
		<h3>Mini version</h3>
        
		<p>For a more compact version that is useful in toolbars and tight spaces, add the <code>data-mini="true"</code> attribute to the element to create a mini version.</p>
		
<pre><code>
&lt;label for=&quot;basic&quot;&gt;Text Input:&lt;/label&gt;
&lt;input type=&quot;text&quot; name=&quot;name&quot; id=&quot;basic&quot; value=&quot;&quot; data-mini=&quot;true&quot; /&gt;
</code></pre>

		<p>This will produce an input that is not as tall as the standard version and has a smaller text size.
		<iframe src="/resources/textinput/example2.html" style="width:100%;height:90px;border:0px"></iframe></p>
        
		<h3>Field containers</h3>
        
		<p>Optionally wrap the text input in a container with the <code> data-role="fieldcontain"</code> attribute to help visually group it in a longer form.</p>
<pre><code>
&lt;div data-role=&quot;fieldcontain&quot;&gt;
	&lt;label for=&quot;name&quot;&gt;Text Input:&lt;/label&gt;
	&lt;input type=&quot;text&quot; name=&quot;name&quot; id=&quot;name&quot; value=&quot;&quot; /&gt;
&lt;/div&gt;	
</code></pre>	

		<p>The text input is now displayed like this:
		<iframe src="/resources/textinput/example3.html" style="width:100%;height:90px;border:0px"></iframe></p>
        
        <h3>More text input types</h3>
		<p>In jQuery Mobile, you can use existing and new HTML5 input types such as <code>password</code>, <code>email</code>, <code>tel</code>, <code>number</code>, and more.  Some type values are rendered differently across browsers. For example, Chrome renders the <code>range</code> input as a slider. jQuery Mobile standardizes the appearance of <code>range</code> and <code>search</code> by dynamically changing their type to <code>text</code>. You can configure which input types are degraded to <code>text</code> with the <code>page</code> plugin's options.</p>
			
		<p>One major advantage of using these more specific input types if that on mobile devices, specialized keyboards that speed data entry are offered in place of the standard text keyboard. Try the following inputs on a mobile device to see which display custom keyboards on various platforms.
		<iframe src="/resources/textinput/example4.html" style="width:100%;height:710px;border:0px"></iframe></p>
		
        <h2>Textareas</h2>
        
		<p>For multi-line text inputs, use a <code>textarea</code> element. The framework will auto-grow the height of the textarea to avoid the need for an internal scrollbar. </p>
		<p>Set the <code>for</code> attribute of the <code>label</code> to match the <code>id</code> of the <code>textarea</code> so they are semantically associated, and wrap them in a <code>div</code> with the <code> data-role="fieldcontain"</code> attribute to group them.</p>

<pre><code>	
&lt;label for=&quot;textarea-a&quot;&gt;Textarea:&lt;/label&gt;
&lt;textarea name=&quot;textarea&quot; id=&quot;textarea-a&quot;&gt;
I&#x27;m a basic textarea. If this is pre-populated with content, the height will be automatically adjusted to fit without needing to scroll. That is a pretty handy usability feature.
&lt;/textarea&gt;
</code></pre>	

		<p>This will produce a basic textarea with the width set to 100% of the parent container and the label stacked on a separate line. The textarea will grow to fit new lines as you type:
		<iframe src="/resources/textinput/example5.html" style="width:100%;height:190px;border:0px"></iframe></p>
       
<pre><code>	
&lt;div data-role=&quot;fieldcontain&quot;&gt;
&lt;label for=&quot;textarea&quot;&gt;Textarea:&lt;/label&gt;
	&lt;textarea name=&quot;textarea&quot; id=&quot;textarea&quot;&gt;&lt;/textarea&gt;
&lt;/div&gt;
</code></pre>	
	            
		<p>The textarea is displayed like this and will grow to fit new lines as you type:
		<iframe src="/resources/textinput/example6.html" style="width:100%;height:190px;border:0px"></iframe></p>
        
        <h3>Calling the textinput plugin</h3>

		<p>This plugin will auto initialize on any page that contains a textarea or any of the text input types listed above without any need for a <code>data-role</code> attribute in the markup. However, if needed, you can directly call the <code>textinput</code> plugin on any selector, just like any jQuery plugin:</p>
<pre><code>
$( 'input' ).textinput();			
</code></pre>
				
		<h3>Degraded input types</h3>
        
		<p>jQuery Mobile degrades several HTML5 input types back to type=text or type=number after adding enhanced controls. For example, inputs with a type of range are enhanced with a custom slider control, and their type is set to number to offer a usable form input alongside that slider. Inputs with a type of search are degraded back to type=text after we add our own themable search input styling.</p>
		<p>The page plugin contains a list of input types that are set to either true which means they'll degrade to type=text, false which means they'll be left alone, or a string such as "number", which means they'll be converted to that type (such as the case of type=range).</p>
		
		<p>You can configure which types are changed via the page plugin's <code>degradeInputs</code> option, which can be manipulated externally via <code>$.mobile.page.prototype.options.degradeInputs</code>, which has properties: color, date, datetime, "datetime-local", email, month, number, range, search, tel, time, url, and week. Be sure to configure this inside an event handler bound to the <code>mobileinit</code> event, so that it applies to the first page as well as subsequent pages that are loaded.</p>	

		<h2>Search Input</h2>
		<p>Search inputs are a new HTML type that is styled with pill-shaped corners and adds an "x" icon to clear the field once you start typing. Start with an input with a type="search" attribute in your markup.</p>
		<p>Set the <code>for</code> attribute of the <code>label</code> to match the <code>id</code> of the <code>input</code> so they are semantically associated. It's possible to accessibly hide the label if it's not desired in the page layout, but we require that it is present in the markup for semantic and accessibility reasons.</p>

<pre><code>
&lt;label for="search-basic"&gt;Search Input:&lt;/label&gt;
&lt;input type="search" name="search" id="search-basic" value="" /&gt;
</code></pre>
		<p>This will produce a basic search input. The default styles set the width of the input to 100% of the parent container and stack the label on a separate line.
		<iframe src="/resources/search-input/example1.html" style="width:100%;height:90px;border:0px"></iframe></p>
        
		<h3>Mini version</h3>
        
		<p>For a more compact version that is useful in toolbars and tight spaces, add the <code>data-mini="true"</code> attribute to the element to create a mini version.</p>
		
<pre><code>
&lt;label for=&quot;search-mini&quot;&gt;Search Input:&lt;/label&gt;
&lt;input type=&quot;search&quot; name=&quot;search-mini&quot; id=&quot;search-mini&quot; value=&quot;&quot; data-mini=&quot;true&quot;/&gt;
</code></pre>

		<p>This will produce a search input that is not as tall as the standard version and has a smaller text size.
		<iframe src="/resources/search-input/example2.html" style="width:100%;height:90px;border:0px"></iframe></p>
        
		<h3>Field containers</h3>
        
		<p>Optionally wrap the search input in a container with the <code>data-role="fieldcontain"</code> attribute to help visually group it in a longer form.</p>
<pre><code>
&lt;div data-role=&quot;fieldcontain&quot;&gt;
	&lt;label for=&quot;search-2&quot;&gt;Search Input:&lt;/label&gt;
	&lt;input type=&quot;search&quot; name=&quot;search-2&quot; id=&quot;search-2&quot; value=&quot;&quot; /&gt;
&lt;/div&gt;
</code></pre>	

		<p>The search input is now displayed like this:
		<iframe src="/resources/search-input/example3.html" style="width:100%;height:90px;border:0px"></iframe>
		</p>
		
		<h3>Theming</h3>
		<p>The <code>data-theme</code> attribute can be added to the search input to set the theme to any swatch letter.
		<iframe src="/resources/search-input/example4.html" style="width:100%;height:90px;border:0px"></iframe>
		</p>
		
		<h3>Setting the clear button text</h3>
		
		<p>The text for the button used to clear the search input of text can be configured for all search inputs by binding to the <code>mobileinit</code> event and setting the 
		<code>$.mobile.textinput.prototype.options.clearSearchButtonText</code> property to a string of your choosing.</p>
			
		<h3>Calling the textinput plugin</h3>

		<p>This plugin will auto-initialize on any page that contains a text input with the <code>type="search"</code> attribute without any need for a <code>data-role</code> attribute in the markup. However, if needed, you can directly call the <code>textinput</code> plugin on a selector, just like any jQuery plugin:</p>
		
<pre><code>
$( '.mySearchInput' ).textinput();			
</code></pre>        

	</longdesc>
	<added>1.0</added>
	<options>
    	<option name="disabled" default="false" example-value="true">
        	<desc>Sets the default state of the text input to disabled when "true".

			</desc>
            <type name="Boolean" />
        </option>
		<option name="initSelector" default="input[type='text'], input[type='search'], :jqmData(type='search'), input[type='number'], :jqmData(type='number'), input[type='password'], input[type='email'], input[type='url'], input[type='tel'], textarea, input:not([type])">
			<desc>This is used to define the selectors (element types, data roles, etc.) that will automatically be initialized as textinputs. To change which elements are initialized, bind this option to the mobileinit event:
<pre><code>
$( document ).bind( "mobileinit", function(){
	$.mobile.textinput.prototype.options.initSelector = ".myInputs";
}); 
</code></pre>
				<p>This option is also exposed as a data attribute: <code>data-mini="true"</code>.</p>
			</desc>
			<type name="CSS selector string" />
		</option>
		<option name="mini" default="false" example-value="true">
			<desc>Sets the size of the element to a more compact, mini version. 

				<p>This option is also exposed as a data attribute: <code>data-mini="true"</code>.</p>
			</desc>
            <type name="Boolean" />
		</option>
		<option name="preventFocusZoom" default="true on iOS platforms" example-value="true">
			<desc>This option disables page zoom temporarily when a custom input is focused, which prevents iOS devices from zooming the page into the input. By default, iOS often zooms into form controls, and the behavior is often unnecessary and intrusive in mobile-optimized layouts.

				<p>This option is also exposed as a data attribute: <code>data-prevent-focus-zoom="true"</code>.</p>
			</desc>
			<type name="String" />
		</option>
		<option name="theme" default="null, inherited from parent" example-value='"a"'>
			<desc>Sets the color scheme (swatch) for all instances of this widget. It accepts a single letter from a-z that maps to the swatches included in your theme. By default, it will inherit the same swatch color as its parent container if not explicitly set.

				<p>Possible values: swatch letter (a-z).</p>
				<p>This option is also exposed as a data attribute: <code>data-theme="a"</code>.</p>
			</desc>
			<type name="String" />
		</option>
	</options>
	<events>
		<event name="create" type="textinputcreate">
			<desc>triggered when a text input is created
<pre><code>
$( ".selector" ).textinput({
	create: function( event, ui ) { ... }
});
</code></pre>
			</desc>
		</event>
	</events>
	<methods>
		<method name="enable">
			<desc>enable a disabled text input.
<pre><code>
$( '.selector' ).textinput( 'enable' );
</code></pre>
			</desc>
		</method>
		<method name="disable">
			<desc>disable a text input.
<pre><code>
$( '.selector' ).textinput( 'disable' );
</code></pre>
			</desc>
		</method>
	</methods>
	<example>
		<desc>A basic example of a search input field</desc>
		<html><![CDATA[<div data-role="header">
		<h1>jQuery Mobile Example</h1>
	</div>
	<div data-role="content">
    	<label for="basic">Text Input:</label>
        <input type="text" name="name" id="basic" value=""  />
	</div>]]></html>
	</example>
	<example>
		<desc>A basic example of a search input field</desc>
		<html><![CDATA[<div data-role="header">
		<h1>jQuery Mobile Example</h1>
	</div>
	<div data-role="content">
		<label for="search-basic">Search Input:</label>
		<input type="search" name="search" id="search-basic" value="" />
	</div>]]></html>
	</example>
	<category slug="widgets"/>
</entry>
