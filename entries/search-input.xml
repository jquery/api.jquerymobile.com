<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="../entries2html.xsl" ?>
<entry name="search input" namespace="fn" type="widget" widgetnamespace="mobile">
	<title>Search input Widget</title>
    <desc>Creates a search input widget</desc>
    <longdesc>
		<p>Search inputs are a new HTML type that is styled with pill-shaped corners and adds an "x" icon to clear the field once you start typing. Start with an input with a type="search" attribute in your markup.</p>
		<p>Set the <code>for</code> attribute of the <code>label</code> to match the <code>id</code> of the <code>input</code> so they are semantically associated. It's possible to accessibly hide the label if it's not desired in the page layout, but we require that it is present in the markup for semantic and accessibility reasons.</p>

<pre><code>
&lt;label for="search-basic"&gt;Search Input:&lt;/label&gt;
&lt;input type="search" name="search" id="search-basic" value="" /&gt;
</code></pre>
		<p>This will produce a basic search input. The default styles set the width of the input to 100% of the parent container and stack the label on a separate line.
		<iframe src="/resources/search-input/example1.html" style="width:100%;height:90px;border:0px"></iframe></p>
        
		<h3>Mini version</h3>
        
		<p>For a more compact version that is useful in toolbars and tight spaces, add the <code>data-mini="true"</code> attribute to the element to create a mini version.</p>
		
<pre><code>
&lt;label for=&quot;search-mini&quot;&gt;Search Input:&lt;/label&gt;
&lt;input type=&quot;search&quot; name=&quot;search-mini&quot; id=&quot;search-mini&quot; value=&quot;&quot; data-mini=&quot;true&quot;/&gt;
</code></pre>

		<p>This will produce a search input that is not as tall as the standard version and has a smaller text size.
		<iframe src="/resources/search-input/example2.html" style="width:100%;height:90px;border:0px"></iframe></p>
        
		<h3>Field containers</h3>
        
		<p>Optionally wrap the search input in a container with the <code>data-role="fieldcontain"</code> attribute to help visually group it in a longer form.</p>
<pre><code>
&lt;div data-role=&quot;fieldcontain&quot;&gt;
	&lt;label for=&quot;search-2&quot;&gt;Search Input:&lt;/label&gt;
	&lt;input type=&quot;search&quot; name=&quot;search-2&quot; id=&quot;search-2&quot; value=&quot;&quot; /&gt;
&lt;/div&gt;
</code></pre>	

		<p>The search input is now displayed like this:
		<iframe src="/resources/search-input/example3.html" style="width:100%;height:90px;border:0px"></iframe>
		</p>
		
		<h3>Theming</h3>
		<p>The <code>data-theme</code> attribute can be added to the search input to set the theme to any swatch letter.
		<iframe src="/resources/search-input/example4.html" style="width:100%;height:90px;border:0px"></iframe>
		</p>
		
		<h3>Setting the clear button text</h3>
		
		<p>The text for the button used to clear the search input of text can be configured for all search inputs by binding to the <code>mobileinit</code> event and setting the 
		<code>$.mobile.textinput.prototype.options.clearSearchButtonText</code> property to a string of your choosing.</p>
			
		<h3>Calling the textinput plugin</h3>

		<p>This plugin will auto-initialize on any page that contains a text input with the <code>type="search"</code> attribute without any need for a <code>data-role</code> attribute in the markup. However, if needed, you can directly call the <code>textinput</code> plugin on a selector, just like any jQuery plugin:</p>
		
<pre><code>
$('.mySearchInput').textinput();			
</code></pre>        
	</longdesc>
	<added>1.0</added>
	<options>
		<option name="initSelector" default="input[type='text'], input[type='search'], :jqmData(type='search'), input[type='number'], :jqmData(type='number'), input[type='password'], input[type='email'], input[type='url'], input[type='tel'], textarea, input:not([type])">
			<desc>This is used to define the selectors (element types, data roles, etc.) that will automatically be initialized as textinputs. To change which elements are initialized, bind this option to the mobileinit event:
<pre><code>
$( document ).bind( "mobileinit", function(){
	$.mobile.textinput.prototype.options.initSelector = ".myInputs";
}); 
</code></pre>
				<p>This option is also exposed as a data attribute: <code>data-mini="true"</code>.</p>
			</desc>
			<type name="CSS selector string" />
		</option>
		<option name="mini" default="false">
			<desc>Sets the size of the element to a more compact, mini version. 
<pre><code>
$('.selector').textinput({ mini: true }); 
</code></pre>
				<p>This option is also exposed as a data attribute: <code>data-mini="true"</code>.</p>
			</desc>
            <type name="Boolean" />
		</option>
		<option name="clearSearchButtonText" default="clear text">
			<desc>Sets the text used for the button that clears the search input of text.
<pre><code>
$('.selector').textinput({ clearSearchButtonText: "custom value" });
</code></pre>
			</desc>
			<type name="String" />
		</option>
		<option name="theme" default="null, inherited from parent">
			<desc>Sets the color scheme (swatch) for all instances of this widget. It accepts a single letter from a-z that maps to the swatches included in your theme. By default, it will inherit the same swatch color as its parent container if not explicitly set.
<pre><code>
$('.selector').textinput({ theme: "a" });
</code></pre>
				<p>Possible values: swatch letter (a-z).</p>
				<p>This option is also exposed as a data attribute: <code>data-theme="a"</code>.</p>
			</desc>
			<type name="String" />
		</option>
	</options>
	<events>
		<event name="create" type="textinputcreate">
			<desc>triggered when a text input is created</desc>
<pre><code>
$( ".selector" ).textinput({
	create: function(event, ui) { ... }
});
</code></pre>
		</event>
	</events>
	<methods>
		<method name="enable">
			<desc>enable a disabled text input.
<pre><code>
$('.selector').textinput('enable');
</code></pre>
			</desc>
		</method>
		<method name="disable">
			<desc>disable a text input.
<pre><code>
$('.selector').textinput('disable');
</code></pre>
			</desc>
		</method>
	</methods>
	<example>
		<desc>A basic example of a search input field</desc>
		<code><![CDATA[]]></code>
		<html><![CDATA[  
		<label for="search-basic">Search Input:</label>
		<input type="search" name="search" id="search-basic" value="" /> ]]></html>
	</example>
	<category slug="widgets"/>
</entry>