<?xml version="1.0"?>
<entry name="pagebeforeload" type="event" return="">
	<title>pagebeforeload</title>
	<desc>Triggered before any load request is made.</desc>
	<longdesc>
		<p>Callbacks bound to this event can call <code>preventDefault()</code> on the event to indicate that they are handling the load request. Callbacks that do this *MUST* make sure they call <code>resolve()</code> or <code>reject()</code> on the deferred object reference contained in the data object passed to the callback.</p>
			<p>The data object, passed as the 2nd arg to the callback function contains the following properties:</p>
            <ul>
            	<li><code>url</code> (string)
					<ul>
           	    		<li>The absolute or relative URL that was passed into <code>$.mobile.loadPage()</code> by the caller.</li>
          	    	</ul>
            	</li>
            	<li><code>absUrl</code> (string)
            		<ul>
            	    	<li>The absolute version of the url. If url was relative, it is resolved against the url used to load the current active page.</li>
          	    	</ul>
            	</li>
            	<li><code>dataUrl</code> (string)
					<ul>
						<li>The filtered version of absUrl to be used when identifying the page and updating the browser location when the page is made active.</li>
					</ul>
				</li>
            	<li><code>deferred</code> (object)
					<ul>
						<li>Callbacks that call <code>preventDefault()</code> on the event, *MUST* call <code>resolve()</code> or <code>reject()</code> on this object so that <code>changePage()</code> requests resume processing. Deferred object observers expect the deferred object to be resolved like this:
<pre><code>
$( document ).on( &quot;pagebeforeload&quot;, function( event, data ) {

	// Let the framework know we're going to handle the load.

	event.preventDefault();

	// ... load the document then insert it into the DOM ...
	// at some point, either in this callback, or through
	// some other async means, call resolve, passing in
	// the following args, plus a jQuery collection object
	// containing the DOM element for the page.

	data.deferred.resolve( data.absUrl, data.options, page );

});
</code></pre>
					<p>or rejected like this:</p>
<pre><code>
$( document ).on( &quot;pagebeforeload&quot;, function( event, data ) {

	// Let the framework know we're going to handle the load.

	event.preventDefault();

	// ... load the document then insert it into the DOM ...
	// at some point, if the load fails, either in this
	// callback, or through some other async means, call
	// reject like this:

	data.deferred.reject( data.absUrl, data.options );

});</code></pre>
					</li>
				</ul>
				</li>
				<li><code>options</code> (object)
					<ul>
						<li>This object contains the options that were passed into $.mobile.loadPage().</li>
					</ul>
				</li>
			</ul>	
	</longdesc>
	<added>1.0</added>
	<signature>
		
	</signature>
	<category slug="events"/>
</entry>
