<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="../entries2html.xsl" ?>
<entry name="rangeslider" namespace="fn" type="widget" widgetnamespace="mobile" event-prefix="rangeslider" init-selector=":jqmData(role=&#39;rangeslider&#39;)">
	<title>Rangeslider Widget</title>
	<desc>Creates a rangeslider widget</desc>
	<longdesc>
		<h2>Range Slider</h2>

		<p>The rangeslider widget can be considered as a double handle slider. To add a rangeslider widget to your page, use two standard inputs with the <code>type="range"</code> attribute, and put them inside a <code>&lt;div&gt;</code> container. The input values are used to configure the starting position of the handles and the values are populated in the corresponding text inputs (the first one at the beginning of the rangeslider, and the second one at the end). Specify <code>min</code> and <code>max</code> attribute values to set the rangeslider's range. If you want to constrain inputs to specific increments, add the <code>step</code> attribute. Set the <code>value</code> attribute on each input to define their initial value. The framework will parse these attributes to configure the rangeslider widget.</p>
		<p>As you drag the rangeslider's handles, the framework will update the native input values (and vice-versa) so they are always in sync; this ensures that the values are submitted with the form.</p>
		<p>Set the <code>for</code> attribute of the <code>labels</code> to match the <code>ids</code> of the <code>inputs</code> so they are semantically associated. It's possible to accessibly hide the labels if they're not desired in the page layout, but we require that they are present in the markup for semantic and accessibility reasons.</p>
		<p>The framework will find all <code>input</code> elements with a <code>type="range"</code> and automatically enhance them into a slider with an accompanying input without any need to apply a <code>data-role</code> attribute. To prevent the automatic enhancement of this input into a slider, add the <code>data-role="none"</code> attribute to the inputs.</p>
		<p>In this example, the acceptable range is 0-100.</p>

<pre><code><![CDATA[
<div data-role="rangeslider">
	<label for="range-1a">Rangeslider:</label>
	<input name="range-1a" id="range-1a" min="0" max="100" value="0" type="range" />
	<label for="range-1b">Rangeslider:</label>
	<input name="range-1b" id="range-1b" min="0" max="100" value="100" type="range" />
</div>
]]></code></pre>

		<p>The default rangeslider with these settings is displayed like this:
		<iframe src="/resources/rangeslider/example1.html" style="width:100%;height:90px;border:0px"></iframe></p>

		<h3>Step increment</h3>
		<p>To force the range to snap to a specific increment, add the <code>step</code> attribute to the input. By default, the step is 1, but in this example, the step is 0.1 and the maximum value is 10.</p>
		<p>In this example, the acceptable range is 0-100.</p>

<pre><code><![CDATA[
<div data-role="rangeslider">
	<label for="range-10a">Rangeslider:</label>
	<input name="range-10a" id="range-10a" min="0" max="10" step=".1" value="0" type="range" />
	<label for="range-10b">Rangeslider:</label>
	<input name="range-10b" id="range-10b" min="0" max="10" step=".1" value="10" type="range" />
</div>
]]></code></pre>

		<p>This will produce an input that snaps to increments of 0.1. If a value is added to the input that isn't valid with the step increment, the value will be reset on blur to the closest step.
		<iframe src="/resources/rangeslider/example2.html" style="width:100%;height:90px;border:0px"></iframe></p>

		<h3>Fill highlight</h3>

		<p>By default, there is a highlight fill on the track between the two slider handles. To remove it, add the <code>data-highlight="false"</code> attribute to the input. The fill uses the active state swatch. </p>

<pre><code><![CDATA[
<div data-role="rangeslider" data-highlight="false">
	<label for="range-2a">Rangeslider (default is "true"):</label>
	<input name="range-2a" id="range-2a" min="0" max="100" value="0" type="range" />
	<label for="range-2b">Rangeslider:</label>
	<input name="range-2b" id="range-2b" min="0" max="100" value="100" type="range" />
</div>
]]></code></pre>

		<iframe src="/resources/rangeslider/example3.html" style="width:100%;height:90px;border:0px"></iframe>

		<h3>Theming the slider</h3>

		<p>To set the theme swatch for the rangeslider, add a <code>data-theme</code> attribute to the <code>inputs</code> which will apply the theme to the inputs, handles and track. The track swatch can be set separately by adding the <code>data-track-theme</code> attribute to apply the down state version of the selected button swatch.</p>

<pre><code><![CDATA[
<div data-role="rangeslider" data-track-theme="a" data-theme="b">
	<label for="range-3a">Rangeslider:</label>
	<input name="range-3a" id="range-3a" min="0" max="100" value="0" type="range" />
	<label for="range-3b">Rangeslider:</label>
	<input name="range-3b" id="range-3b" min="0" max="100" value="100" type="range" />
</div>
]]></code></pre>

		<p>This will produce a themed rangeslider:
		<iframe src="/resources/rangeslider/example4.html" style="width:100%;height:90px;border:0px"></iframe></p>

		<h3>Mini version</h3>

		<p>For a more compact version that is useful in toolbars and tight spaces, add the <code>data-mini="true"</code> attribute to the element to create a mini version. </p>

<pre><code><![CDATA[
<div data-role="rangeslider" data-mini="true">
	<label for="range-4a">Rangeslider:</label>
	<input name="range-4a" id="range-4a" min="0" max="100" value="0" type="range" />
	<label for="range-4b">Rangeslider:</label>
	<input name="range-4b" id="range-4b" min="0" max="100" value="100" type="range" />
</div>
]]></code></pre>

		<p>This will produce a rangeslider and its corresponding inputs that are not as tall as the standard version. The inputs also have a smaller text size.
		<iframe src="/resources/rangeslider/example5.html" style="width:100%;height:90px;border:0px"></iframe></p>

		<h3>Field containers</h3>

		<p>Optionally wrap the rangeslider markup in a container with class <code>ui-field-contain</code> to help visually group it in a longer form. In this example, the step attribute is omitted to allow any whole number value to be selected.</p>
		<div class="warning">
			<p><strong>Note: </strong>The <code>data-</code> attribute <code>data-role="fieldcontain"</code> is deprecated as of jQuery Mobile 1.4.0 and will be removed in 1.5.0. Use the <code>ui-field-contain</code> class instead.</p>
		</div>

<pre><code><![CDATA[
<div class="ui-field-contain">
	<div data-role="rangeslider">
		<label for="range-7a">Rangeslider:</label>
		<input name="range-7a" id="range-7a" min="0" max="100" value="0" type="range" />
		<label for="range-7b">Rangeslider:</label>
		<input name="range-7b" id="range-7b" min="0" max="100" value="100" type="range" />
	</div>
</div>
]]></code></pre>

		<p>The rangeslider is now displayed like this:
		<iframe src="/resources/rangeslider/example6.html" style="width:100%;height:90px;border:0px"></iframe></p>

		<p>Sliders also respond to key commands. Right Arrow, Up Arrow and Page Up keys increase the value; Left Arrow, Down Arrow and Page Down keys decrease it. To move the slider to its minimum or maximum value, use the Home or End key, respectively.</p>

		<h3>Calling the rangeslider plugin</h3>

		<p>This plugin will auto initialize on any page that contains a <code>div</code> with the <code>data-role="rangeslider"</code> attribute. However, if needed you can directly call the rangeslider plugin on any selector, just like any jQuery plugin:</p>

<pre><code><![CDATA[
$( "div#range-slider" ).rangeslider();
]]></code></pre>

	</longdesc>
	<added>1.3</added>
	<options>
		<xi:include href="../includes/widget-option-defaults.xml" xmlns:xi="http://www.w3.org/2003/XInclude"/>
		<xi:include href="../includes/widget-option-disabled.xml" xmlns:xi="http://www.w3.org/2003/XInclude"/>
		<option name="highlight" default="true" example-value="false">
			<desc>Sets an active state fill on the track between the two rangeslider handles when set to "true".
				<p>This option is also exposed as a data attribute: <code>data-highlight="false"</code>.</p>
			</desc>
			<type name="Boolean" />
		</option>
		<xi:include href="../includes/widget-option-initSelector.xml" xmlns:xi="http://www.w3.org/2003/XInclude"/>
		<xi:include href="../includes/widget-option-mini.xml" xmlns:xi="http://www.w3.org/2003/XInclude"/>
		<xi:include href="../includes/widget-option-theme.xml" xmlns:xi="http://www.w3.org/2003/XInclude"/>
		<option name="trackTheme" default="null, inherited from parent" example-value='"a"'>
			<desc>Sets the color scheme (swatch) for the slider's track, specifically. It accepts a single letter from a-z that maps to the swatches included in your theme.
				<p>Possible values: swatch letter (a-z).</p>
				<p>This option can be overridden in the markup by assigning a data attribute to the input, e.g. <code>data-track-theme="a"</code>.</p>
			</desc>
			<type name="String" />
		</option>
	</options>
	<events>
		<xi:include href="../includes/widget-event-create.xml" xmlns:xi="http://www.w3.org/2003/XInclude"/>
		<event name="normalize">
			<desc>triggered when the input values are normalized (generally happens when you try to drag one handle past the other).</desc>
			<argument name="event" type="Event">
				<desc></desc>
			</argument>
		</event>
	</events>
	<methods>
		<xi:include href="../includes/widget-method-destroy.xml" xmlns:xi="http://www.w3.org/2003/XInclude"/>
		<xi:include href="../includes/widget-method-disable.xml" xmlns:xi="http://www.w3.org/2003/XInclude"/>
		<xi:include href="../includes/widget-method-enable.xml" xmlns:xi="http://www.w3.org/2003/XInclude"/>
		<xi:include href="../includes/widget-method-option.xml" xmlns:xi="http://www.w3.org/2003/XInclude"/>
		<method name="refresh">
			<desc>update the rangeslider.
				<p>If you manipulate a rangeslider via JavaScript, you must call the refresh method on it to update the visual styling.</p>
			</desc>
		</method>
	</methods>
	<example>
		<desc>A basic example of a rangeslider.</desc>
		<html><![CDATA[
<div data-role="page" id="page1">
	<div data-role="header">
		<h1>jQuery Mobile Example</h1>
	</div>
	<div data-role="rangeslider">
		<label for="range-1a">Rangeslider:</label>
		<input name="range-1a" id="range-1a" min="0" max="100" value="0" type="range">
		<label for="range-1b">Rangeslider:</label>
		<input name="range-1b" id="range-1b" min="0" max="100" value="100" type="range">
	</div>
</div>
]]></html>
	</example>
	<category slug="widgets"/>
</entry>
